{"results": [{"node": {"raw_sql": "with project as (\n\n    select *\n    from {{ var('project') }}\n\n), fields as (\n\n    select\n      id as project_id,\n      archived as is_archived,\n      created_at,\n      current_status, \n      due_date,\n      modified_at,\n      name as project_name,\n      owner_id as owner_user_id,\n      public as is_public,\n      team_id,\n      workspace_id,\n      notes\n\n    from project\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_project"], "unique_id": "model.asana_source.stg_asana_project", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_project.sql", "original_file_path": "models/stg_asana_project.sql", "name": "stg_asana_project", "resource_type": "model", "alias": "stg_asana_project", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.project"]}, "description": "Table containing all projects", "columns": {"project_id": {"name": "project_id", "description": "System-generated unique ID of the project", "meta": {}, "data_type": null, "tags": []}, "is_archived": {"name": "is_archived", "description": "Boolean representing if the project has been arhcived in the UI", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the project was created", "meta": {}, "data_type": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project (free-form string)", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due on, if given", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the project was last modified (doesn't include comments or tasks)", "meta": {}, "data_type": null, "tags": []}, "project_name": {"name": "project_name", "description": "The user-facing name of the project", "meta": {}, "data_type": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that is true if the project is public to all users in the organization", "meta": {}, "data_type": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the TEAM that the project is shared with.", "meta": {}, "data_type": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The ID of the organization's entire Asana workspace. Not relevant unless you're looking at multiple orgs", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual notes associated with the project.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_project.sql", "compiled": true, "compiled_sql": "with project as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project`\n\n), fields as (\n\n    select\n      id as project_id,\n      archived as is_archived,\n      created_at,\n      current_status, \n      due_date,\n      modified_at,\n      name as project_name,\n      owner_id as owner_user_id,\n      public as is_public,\n      team_id,\n      workspace_id,\n      notes\n\n    from project\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with project as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project`\n\n), fields as (\n\n    select\n      id as project_id,\n      archived as is_archived,\n      created_at,\n      current_status, \n      due_date,\n      modified_at,\n      name as project_name,\n      owner_id as owner_user_id,\n      public as is_public,\n      team_id,\n      workspace_id,\n      notes\n\n    from project\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.06101179122924805, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.235837Z", "completed_at": "2020-08-07T18:56:48.292933Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.293877Z", "completed_at": "2020-08-07T18:56:48.293936Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with project_task as (\n\n    select *\n    from {{ var('project_task') }}\n\n), fields as (\n\n    select\n        project_id,\n        task_id\n\n    from project_task\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_project_task"], "unique_id": "model.asana_source.stg_asana_project_task", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_project_task.sql", "original_file_path": "models/stg_asana_project_task.sql", "name": "stg_asana_project_task", "resource_type": "model", "alias": "stg_asana_project_task", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "project_task"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.project_task"]}, "description": "Table of tasks and the project(s) they each belong to. If a project doesn't have a task, it won't be in here (and vice versa)", "columns": {"project_id": {"name": "project_id", "description": "Foreign key referencing the ID of the PROJECT", "meta": {}, "data_type": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_project_task.sql", "compiled": true, "compiled_sql": "with project_task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project_task`\n\n), fields as (\n\n    select\n        project_id,\n        task_id\n\n    from project_task\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with project_task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project_task`\n\n), fields as (\n\n    select\n        project_id,\n        task_id\n\n    from project_task\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.06041097640991211, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.263082Z", "completed_at": "2020-08-07T18:56:48.293355Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.294288Z", "completed_at": "2020-08-07T18:56:48.294295Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with section as (\n\n    select *\n    from {{ var('section') }}\n\n), fields as (\n\n    select\n        id as section_id,\n        created_at,\n        name as section_name,\n        project_id\n\n    from section\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_section"], "unique_id": "model.asana_source.stg_asana_section", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_section.sql", "original_file_path": "models/stg_asana_section.sql", "name": "stg_asana_section", "resource_type": "model", "alias": "stg_asana_section", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.section"]}, "description": "Table of all sections within projects. If tasks in a project are not in an explicit user-made section, a default section called \"(no section)\" is created here", "columns": {"section_id": {"name": "section_id", "description": "System-generated unique ID of the section", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the section was created", "meta": {}, "data_type": null, "tags": []}, "section_name": {"name": "section_name", "description": "User-facing name of the section.", "meta": {}, "data_type": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the id of the PROJECT the section lives in.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_section.sql", "compiled": true, "compiled_sql": "with section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`section`\n\n), fields as (\n\n    select\n        id as section_id,\n        created_at,\n        name as section_name,\n        project_id\n\n    from section\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`section`\n\n), fields as (\n\n    select\n        id as section_id,\n        created_at,\n        name as section_name,\n        project_id\n\n    from section\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.06071901321411133, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.264945Z", "completed_at": "2020-08-07T18:56:48.293632Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.294737Z", "completed_at": "2020-08-07T18:56:48.294742Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with story as (\n\n    select *\n    from {{ var('story') }}\n\n), fields as (\n\n    select\n      id as story_id,\n      created_at,\n      created_by_id as created_by_user_id,\n      target_id as target_task_id,\n      text as story_content,\n      type as event_type\n\n    from story\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_story"], "unique_id": "model.asana_source.stg_asana_story", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_story.sql", "original_file_path": "models/stg_asana_story.sql", "name": "stg_asana_story", "resource_type": "model", "alias": "stg_asana_story", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.story"]}, "description": "Table containing all stories -- stories are actions taken on tasks", "columns": {"story_id": {"name": "story_id", "description": "System generated unique ID of the story/action taken on a task.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story occurred.", "meta": {}, "data_type": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Foreign key referencing the USER who took the action (sometimes null)", "meta": {}, "data_type": null, "tags": []}, "target_task_id": {"name": "target_task_id", "description": "Foreign key referncing the TASK that the action was taken on.", "meta": {}, "data_type": null, "tags": []}, "story_content": {"name": "story_content", "description": "Free-form text that is either the content of a comment (event_type=comment) or the description of an action (event_type=system)", "meta": {}, "data_type": null, "tags": []}, "event_type": {"name": "event_type", "description": "The origin type of the story - a comment or change to the backend (ie altering a task somehow)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_story.sql", "compiled": true, "compiled_sql": "with story as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`story`\n\n), fields as (\n\n    select\n      id as story_id,\n      created_at,\n      created_by_id as created_by_user_id,\n      target_id as target_task_id,\n      text as story_content,\n      type as event_type\n\n    from story\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with story as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`story`\n\n), fields as (\n\n    select\n      id as story_id,\n      created_at,\n      created_by_id as created_by_user_id,\n      target_id as target_task_id,\n      text as story_content,\n      type as event_type\n\n    from story\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.06137514114379883, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.265145Z", "completed_at": "2020-08-07T18:56:48.294546Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.295572Z", "completed_at": "2020-08-07T18:56:48.295577Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with asana_tag as (\n\n    select *\n    from {{ var('tag') }}\n\n), fields as (\n\n    select\n        id as tag_id,\n        name as tag_name,\n        created_at\n\n    from asana_tag\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_tag"], "unique_id": "model.asana_source.stg_asana_tag", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_tag.sql", "original_file_path": "models/stg_asana_tag.sql", "name": "stg_asana_tag", "resource_type": "model", "alias": "stg_asana_tag", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "tag"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.tag"]}, "description": "Table of the custom tags made in the organization", "columns": {"tag_id": {"name": "tag_id", "description": "System generated unique ID of the tag", "meta": {}, "data_type": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "User-facing name of the tag.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_tag.sql", "compiled": true, "compiled_sql": "with asana_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`tag`\n\n), fields as (\n\n    select\n        id as tag_id,\n        name as tag_name,\n        created_at\n\n    from asana_tag\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with asana_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`tag`\n\n), fields as (\n\n    select\n        id as tag_id,\n        name as tag_name,\n        created_at\n\n    from asana_tag\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.04608488082885742, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.299660Z", "completed_at": "2020-08-07T18:56:48.341401Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.342624Z", "completed_at": "2020-08-07T18:56:48.342632Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with task as (\n\n    select *\n    from {{ var('task') }}\n\n), fields as (\n\n    select\n      id as task_id,\n      assignee_id as assignee_user_id,\n      assignee_status,\n      completed as is_completed,\n      completed_at,\n      completed_by_id as completed_by_user_id,\n      created_at,\n      coalesce(due_on, due_at) as due_date,\n      modified_at,\n      name as task_name,\n      parent_id as parent_task_id,\n      start_on as start_date,\n      notes as task_description,\n      workspace_id\n\n    from task\n    \n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task"], "unique_id": "model.asana_source.stg_asana_task", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task.sql", "original_file_path": "models/stg_asana_task.sql", "name": "stg_asana_task", "resource_type": "model", "alias": "stg_asana_task", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task"]}, "description": "Table containing all created tasks", "columns": {"task_id": {"name": "task_id", "description": "System generated unique ID of the task", "meta": {}, "data_type": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the USER that is currently assigned the task.", "meta": {}, "data_type": null, "tags": []}, "assignee_status": {"name": "assignee_status", "description": "Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of \"My Tasks\"", "meta": {}, "data_type": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean that is true if the task is currently marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_by_user_id": {"name": "completed_by_user_id", "description": "Foreign key referencing the USER who completed the task.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was created", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date the task is due, if provided.", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the task was last modified", "meta": {}, "data_type": null, "tags": []}, "task_name": {"name": "task_name", "description": "User-facing name of the task.", "meta": {}, "data_type": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Self-referential id of the parent TASK that this is a subtask of.", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the task, if a date range is given.", "meta": {}, "data_type": null, "tags": []}, "task_description": {"name": "task_description", "description": "Free-form text describing the task, as seen in the UI.", "meta": {}, "data_type": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "ID of the organization's Asana workspace. Irrelevant unless working with multiple companies.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task.sql", "compiled": true, "compiled_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task`\n\n), fields as (\n\n    select\n      id as task_id,\n      assignee_id as assignee_user_id,\n      assignee_status,\n      completed as is_completed,\n      completed_at,\n      completed_by_id as completed_by_user_id,\n      created_at,\n      coalesce(due_on, due_at) as due_date,\n      modified_at,\n      name as task_name,\n      parent_id as parent_task_id,\n      start_on as start_date,\n      notes as task_description,\n      workspace_id\n\n    from task\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task`\n\n), fields as (\n\n    select\n      id as task_id,\n      assignee_id as assignee_user_id,\n      assignee_status,\n      completed as is_completed,\n      completed_at,\n      completed_by_id as completed_by_user_id,\n      created_at,\n      coalesce(due_on, due_at) as due_date,\n      modified_at,\n      name as task_name,\n      parent_id as parent_task_id,\n      start_on as start_date,\n      notes as task_description,\n      workspace_id\n\n    from task\n    \n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.046399831771850586, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.301226Z", "completed_at": "2020-08-07T18:56:48.341937Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.343159Z", "completed_at": "2020-08-07T18:56:48.343164Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with task_follower as (\n\n    select *\n    from {{ var('task_follower') }}\n\n), fields as (\n\n    select\n        task_id,\n        user_id\n\n    from task_follower\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task_follower"], "unique_id": "model.asana_source.stg_asana_task_follower", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task_follower.sql", "original_file_path": "models/stg_asana_task_follower.sql", "name": "stg_asana_task_follower", "resource_type": "model", "alias": "stg_asana_task_follower", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task_follower"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_follower"]}, "description": "Table of tasks with the users that are following them. Tasks without users do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK being followed.", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the USER following the task.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task_follower.sql", "compiled": true, "compiled_sql": "with task_follower as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n), fields as (\n\n    select\n        task_id,\n        user_id\n\n    from task_follower\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_follower as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n), fields as (\n\n    select\n        task_id,\n        user_id\n\n    from task_follower\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.04621624946594238, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.304235Z", "completed_at": "2020-08-07T18:56:48.342313Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.343380Z", "completed_at": "2020-08-07T18:56:48.343398Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with task_section as (\n\n    select *\n    from {{ var('task_section') }}\n\n), fields as (\n\n    select\n        section_id,\n        task_id\n\n    from task_section\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task_section"], "unique_id": "model.asana_source.stg_asana_task_section", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task_section.sql", "original_file_path": "models/stg_asana_task_section.sql", "name": "stg_asana_task_section", "resource_type": "model", "alias": "stg_asana_task_section", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task_section"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_section"]}, "description": "Table of tasks and the section that they live under. Section-less tasks within projects appear here, but project-less tasks do not", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "tags": []}, "section_id": {"name": "section_id", "description": "Foreign key referencing the ID of the SECTION housing the task", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task_section.sql", "compiled": true, "compiled_sql": "with task_section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_section`\n\n), fields as (\n\n    select\n        section_id,\n        task_id\n\n    from task_section\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_section`\n\n), fields as (\n\n    select\n        section_id,\n        task_id\n\n    from task_section\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.04643511772155762, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.323719Z", "completed_at": "2020-08-07T18:56:48.342910Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.344106Z", "completed_at": "2020-08-07T18:56:48.344129Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with task_tag as (\n\n    select *\n    from {{ var('task_tag') }}\n\n), fields as (\n\n    select\n        tag_id,\n        task_id\n\n    from task_tag\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task_tag"], "unique_id": "model.asana_source.stg_asana_task_tag", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task_tag.sql", "original_file_path": "models/stg_asana_task_tag.sql", "name": "stg_asana_task_tag", "resource_type": "model", "alias": "stg_asana_task_tag", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task_tag"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_tag"]}, "description": "Table of tasks with the tags attached to them. Tasks without tags (and vice versa) do not appear here.", "columns": {"tag_id": {"name": "tag_id", "description": "Foreign key referencing the ID of the TAG attached to the task", "meta": {}, "data_type": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task_tag.sql", "compiled": true, "compiled_sql": "with task_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n), fields as (\n\n    select\n        tag_id,\n        task_id\n\n    from task_tag\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n), fields as (\n\n    select\n        tag_id,\n        task_id\n\n    from task_tag\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.05262613296508789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.349388Z", "completed_at": "2020-08-07T18:56:48.397100Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.398465Z", "completed_at": "2020-08-07T18:56:48.398478Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with asana_user as (\n\n    select *\n    from {{ var('user') }}\n\n), fields as (\n\n    select\n      id as user_id,\n      email,\n      name as user_name\n    from asana_user\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_user"], "unique_id": "model.asana_source.stg_asana_user", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_user.sql", "original_file_path": "models/stg_asana_user.sql", "name": "stg_asana_user", "resource_type": "model", "alias": "stg_asana_user", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "user"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.user"]}, "description": "Table of all accounts in the organization", "columns": {"user_id": {"name": "user_id", "description": "System generated unique ID for each user", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The user's email", "meta": {}, "data_type": null, "tags": []}, "user_name": {"name": "user_name", "description": "The name of the user as it appears in the UI", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_user.sql", "compiled": true, "compiled_sql": "with asana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`user`\n\n), fields as (\n\n    select\n      id as user_id,\n      email,\n      name as user_name\n    from asana_user\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with asana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`user`\n\n), fields as (\n\n    select\n      id as user_id,\n      email,\n      name as user_name\n    from asana_user\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.05194902420043945, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.349553Z", "completed_at": "2020-08-07T18:56:48.397672Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.398838Z", "completed_at": "2020-08-07T18:56:48.398845Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with team as (\n\n    select *\n    from {{ var('team') }}\n\n), fields as (\n\n    select\n        id as team_id,\n        name as team_name\n\n    from team\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_team"], "unique_id": "model.asana_source.stg_asana_team", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_team.sql", "original_file_path": "models/stg_asana_team.sql", "name": "stg_asana_team", "resource_type": "model", "alias": "stg_asana_team", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "team"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.team"]}, "description": "Table of the teams within the organization", "columns": {"team_id": {"name": "team_id", "description": "System genereated unique ID for each team", "meta": {}, "data_type": null, "tags": []}, "team_name": {"name": "team_name", "description": "User-facing name of the team", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_team.sql", "compiled": true, "compiled_sql": "with team as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`team`\n\n), fields as (\n\n    select\n        id as team_id,\n        name as team_name\n\n    from team\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with team as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`team`\n\n), fields as (\n\n    select\n        id as team_id,\n        name as team_name\n\n    from team\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "error": null, "status": null, "execution_time": 0.051818132400512695, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.349633Z", "completed_at": "2020-08-07T18:56:48.398090Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.399193Z", "completed_at": "2020-08-07T18:56:48.399201Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["project_id", "task_id"], "model": "{{ source('asana', 'project_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project_task"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.project_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        project_id, task_id\n    from `dbt-package-testing`.`asana`.`project_task`\n\n    group by project_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        project_id, task_id\n    from `dbt-package-testing`.`asana`.`project_task`\n\n    group by project_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.05504584312438965, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.354962Z", "completed_at": "2020-08-07T18:56:48.400630Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.402801Z", "completed_at": "2020-08-07T18:56:48.402808Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_id", "user_id"], "model": "{{ source('asana', 'task_follower') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task_follower"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.task_follower"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, user_id\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n    group by task_id, user_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, user_id\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n    group by task_id, user_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.05291104316711426, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.404929Z", "completed_at": "2020-08-07T18:56:48.450713Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.455055Z", "completed_at": "2020-08-07T18:56:48.455084Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_id", "tag_id"], "model": "{{ source('asana', 'task_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task_tag"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.task_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, tag_id\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n    group by task_id, tag_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, tag_id\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n    group by task_id, tag_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.05301713943481445, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.405238Z", "completed_at": "2020-08-07T18:56:48.451274Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.455640Z", "completed_at": "2020-08-07T18:56:48.455647Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["section_id", "task_id"], "model": "{{ source('asana', 'task_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task_section"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.task_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        section_id, task_id\n    from `dbt-package-testing`.`asana`.`task_section`\n\n    group by section_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        section_id, task_id\n    from `dbt-package-testing`.`asana`.`task_section`\n\n    group by section_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.05410599708557129, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.405101Z", "completed_at": "2020-08-07T18:56:48.455345Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.456287Z", "completed_at": "2020-08-07T18:56:48.456291Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ source('asana', 'project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_project_created_at"], "unique_id": "test.asana_source.source_not_null_asana_project_created_at", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_project_created_at.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_project_created_at", "resource_type": "test", "alias": "source_not_null_asana_project_created_at", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_project_created_at.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere created_at is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere created_at is null\n\n", "column_name": "created_at"}, "error": null, "status": null, "execution_time": 0.054537057876586914, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.445496Z", "completed_at": "2020-08-07T18:56:48.457115Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.458544Z", "completed_at": "2020-08-07T18:56:48.458550Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_project_id"], "unique_id": "test.asana_source.source_not_null_asana_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_project_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_project_id", "resource_type": "test", "alias": "source_not_null_asana_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04364609718322754, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.460486Z", "completed_at": "2020-08-07T18:56:48.490006Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.491780Z", "completed_at": "2020-08-07T18:56:48.491789Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_section_id"], "unique_id": "test.asana_source.source_not_null_asana_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_section_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_section_id", "resource_type": "test", "alias": "source_not_null_asana_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.043913841247558594, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.461032Z", "completed_at": "2020-08-07T18:56:48.492086Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.502053Z", "completed_at": "2020-08-07T18:56:48.502062Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ source('asana', 'section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_section_project_id"], "unique_id": "test.asana_source.source_not_null_asana_section_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_section_project_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_section_project_id", "resource_type": "test", "alias": "source_not_null_asana_section_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_section_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere project_id is null\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.04431796073913574, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.469721Z", "completed_at": "2020-08-07T18:56:48.502325Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.503468Z", "completed_at": "2020-08-07T18:56:48.503473Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_story_created_at"], "unique_id": "test.asana_source.source_not_null_asana_story_created_at", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_story_created_at.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_story_created_at", "resource_type": "test", "alias": "source_not_null_asana_story_created_at", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_story_created_at.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere created_at is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere created_at is null\n\n", "column_name": "created_at"}, "error": null, "status": null, "execution_time": 0.035456180572509766, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.491596Z", "completed_at": "2020-08-07T18:56:48.503246Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.504013Z", "completed_at": "2020-08-07T18:56:48.504018Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_story_id"], "unique_id": "test.asana_source.source_not_null_asana_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_story_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_story_id", "resource_type": "test", "alias": "source_not_null_asana_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04127693176269531, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.505242Z", "completed_at": "2020-08-07T18:56:48.525047Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.534738Z", "completed_at": "2020-08-07T18:56:48.534747Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "target_id", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_story_target_id"], "unique_id": "test.asana_source.source_not_null_asana_story_target_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_story_target_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_story_target_id", "resource_type": "test", "alias": "source_not_null_asana_story_target_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_story_target_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere target_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere target_id is null\n\n", "column_name": "target_id"}, "error": null, "status": null, "execution_time": 0.04189801216125488, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.514473Z", "completed_at": "2020-08-07T18:56:48.540971Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.545133Z", "completed_at": "2020-08-07T18:56:48.545138Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_tag_id"], "unique_id": "test.asana_source.source_not_null_asana_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_tag_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_tag_id", "resource_type": "test", "alias": "source_not_null_asana_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "tag"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`tag`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`tag`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04453611373901367, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.524928Z", "completed_at": "2020-08-07T18:56:48.545738Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.547537Z", "completed_at": "2020-08-07T18:56:48.547550Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ source('asana', 'task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_task_created_at"], "unique_id": "test.asana_source.source_not_null_asana_task_created_at", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_task_created_at.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_task_created_at", "resource_type": "test", "alias": "source_not_null_asana_task_created_at", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_task_created_at.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere created_at is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere created_at is null\n\n", "column_name": "created_at"}, "error": null, "status": null, "execution_time": 0.03738999366760254, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.525321Z", "completed_at": "2020-08-07T18:56:48.546884Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.549083Z", "completed_at": "2020-08-07T18:56:48.549092Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_task_id"], "unique_id": "test.asana_source.source_not_null_asana_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_task_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_task_id", "resource_type": "test", "alias": "source_not_null_asana_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.046669960021972656, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.551331Z", "completed_at": "2020-08-07T18:56:48.576007Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.576523Z", "completed_at": "2020-08-07T18:56:48.576530Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_team_id"], "unique_id": "test.asana_source.source_not_null_asana_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_team_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_team_id", "resource_type": "test", "alias": "source_not_null_asana_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "team"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`team`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`team`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04394078254699707, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.566516Z", "completed_at": "2020-08-07T18:56:48.583033Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.593499Z", "completed_at": "2020-08-07T18:56:48.593505Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_project_id"], "unique_id": "test.asana_source.source_unique_asana_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_project_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_project_id", "resource_type": "test", "alias": "source_unique_asana_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`project`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`project`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.02976679801940918, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.576394Z", "completed_at": "2020-08-07T18:56:48.594647Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.595614Z", "completed_at": "2020-08-07T18:56:48.595620Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_user_id"], "unique_id": "test.asana_source.source_not_null_asana_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_user_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_user_id", "resource_type": "test", "alias": "source_not_null_asana_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "user"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`user`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`user`\nwhere id is null\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.030441999435424805, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.576224Z", "completed_at": "2020-08-07T18:56:48.594834Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.595818Z", "completed_at": "2020-08-07T18:56:48.595822Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_section_id"], "unique_id": "test.asana_source.source_unique_asana_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_section_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_section_id", "resource_type": "test", "alias": "source_unique_asana_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`section`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`section`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04853487014770508, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.596776Z", "completed_at": "2020-08-07T18:56:48.626055Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.634423Z", "completed_at": "2020-08-07T18:56:48.634433Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_story_id"], "unique_id": "test.asana_source.source_unique_asana_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_story_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_story_id", "resource_type": "test", "alias": "source_unique_asana_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`story`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`story`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.04861593246459961, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.613966Z", "completed_at": "2020-08-07T18:56:48.634617Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.643805Z", "completed_at": "2020-08-07T18:56:48.643812Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_tag_id"], "unique_id": "test.asana_source.source_unique_asana_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_tag_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_tag_id", "resource_type": "test", "alias": "source_unique_asana_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "tag"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`tag`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`tag`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.03182196617126465, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.625976Z", "completed_at": "2020-08-07T18:56:48.644091Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.644855Z", "completed_at": "2020-08-07T18:56:48.644859Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_task_id"], "unique_id": "test.asana_source.source_unique_asana_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_task_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_task_id", "resource_type": "test", "alias": "source_unique_asana_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`task`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`task`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.034330129623413086, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.626439Z", "completed_at": "2020-08-07T18:56:48.645301Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.646406Z", "completed_at": "2020-08-07T18:56:48.646423Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_team_id"], "unique_id": "test.asana_source.source_unique_asana_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_team_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_team_id", "resource_type": "test", "alias": "source_unique_asana_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "team"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`team`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`team`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.0463261604309082, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.648027Z", "completed_at": "2020-08-07T18:56:48.680877Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.690586Z", "completed_at": "2020-08-07T18:56:48.690594Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_user_id"], "unique_id": "test.asana_source.source_unique_asana_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_user_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_user_id", "resource_type": "test", "alias": "source_unique_asana_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "user"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`user`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`user`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.05341529846191406, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.670224Z", "completed_at": "2020-08-07T18:56:48.690780Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.691557Z", "completed_at": "2020-08-07T18:56:48.691561Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('stg_asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_project_project_id"], "unique_id": "test.asana_source.not_null_stg_asana_project_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_project_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_project_project_id", "resource_type": "test", "alias": "not_null_stg_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\nwhere project_id is null\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.053214073181152344, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.680736Z", "completed_at": "2020-08-07T18:56:48.699995Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.701141Z", "completed_at": "2020-08-07T18:56:48.701146Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ ref('stg_asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_project_project_id"], "unique_id": "test.asana_source.unique_stg_asana_project_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_project_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_project_project_id", "resource_type": "test", "alias": "unique_stg_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.04321575164794922, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.690990Z", "completed_at": "2020-08-07T18:56:48.702030Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.703227Z", "completed_at": "2020-08-07T18:56:48.703233Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('stg_asana_project_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_project_task_project_id"], "unique_id": "test.asana_source.not_null_stg_asana_project_task_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_project_task_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_project_task_project_id", "resource_type": "test", "alias": "not_null_stg_asana_project_task_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_project_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_project_task_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere project_id is null\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.028662919998168945, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.703024Z", "completed_at": "2020-08-07T18:56:48.722779Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.723477Z", "completed_at": "2020-08-07T18:56:48.723485Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_project_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_project_task_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_project_task_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_project_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_project_task_task_id", "resource_type": "test", "alias": "not_null_stg_asana_project_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_project_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_project_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.03937697410583496, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.714216Z", "completed_at": "2020-08-07T18:56:48.723887Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.732641Z", "completed_at": "2020-08-07T18:56:48.732651Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ ref('stg_asana_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_section_section_id"], "unique_id": "test.asana_source.not_null_stg_asana_section_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_section_section_id", "resource_type": "test", "alias": "not_null_stg_asana_section_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_section_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\nwhere section_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\nwhere section_id is null\n\n", "column_name": "section_id"}, "error": null, "status": null, "execution_time": 0.03005695343017578, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.723278Z", "completed_at": "2020-08-07T18:56:48.742210Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.743259Z", "completed_at": "2020-08-07T18:56:48.743264Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "section_id", "model": "{{ ref('stg_asana_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_section_section_id"], "unique_id": "test.asana_source.unique_stg_asana_section_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_section_section_id", "resource_type": "test", "alias": "unique_stg_asana_section_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_section_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        section_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_id is not null\n    group by section_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        section_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_id is not null\n    group by section_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "section_id"}, "error": null, "status": null, "execution_time": 0.021377086639404297, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.732382Z", "completed_at": "2020-08-07T18:56:48.743063Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.743732Z", "completed_at": "2020-08-07T18:56:48.743736Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "story_id", "model": "{{ ref('stg_asana_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_story_story_id"], "unique_id": "test.asana_source.not_null_stg_asana_story_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_story_story_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_story_story_id", "resource_type": "test", "alias": "not_null_stg_asana_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere story_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere story_id is null\n\n", "column_name": "story_id"}, "error": null, "status": null, "execution_time": 0.03677535057067871, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.744136Z", "completed_at": "2020-08-07T18:56:48.767057Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.767958Z", "completed_at": "2020-08-07T18:56:48.767965Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "target_task_id", "model": "{{ ref('stg_asana_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_story_target_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_story_target_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_story_target_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_story_target_task_id", "resource_type": "test", "alias": "not_null_stg_asana_story_target_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_story_target_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere target_task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere target_task_id is null\n\n", "column_name": "target_task_id"}, "error": null, "status": null, "execution_time": 0.04512381553649902, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.755946Z", "completed_at": "2020-08-07T18:56:48.773520Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.787658Z", "completed_at": "2020-08-07T18:56:48.787666Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "story_id", "model": "{{ ref('stg_asana_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_story_story_id"], "unique_id": "test.asana_source.unique_stg_asana_story_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_story_story_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_story_story_id", "resource_type": "test", "alias": "unique_stg_asana_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "story_id"}, "error": null, "status": null, "execution_time": 0.03403186798095703, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.767722Z", "completed_at": "2020-08-07T18:56:48.788978Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.789692Z", "completed_at": "2020-08-07T18:56:48.789697Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ ref('stg_asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_tag_tag_id"], "unique_id": "test.asana_source.not_null_stg_asana_tag_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_tag_tag_id", "resource_type": "test", "alias": "not_null_stg_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\nwhere tag_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\nwhere tag_id is null\n\n", "column_name": "tag_id"}, "error": null, "status": null, "execution_time": 0.02404308319091797, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.768204Z", "completed_at": "2020-08-07T18:56:48.789201Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.789883Z", "completed_at": "2020-08-07T18:56:48.789887Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ ref('stg_asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_tag_tag_id"], "unique_id": "test.asana_source.unique_stg_asana_tag_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_tag_tag_id", "resource_type": "test", "alias": "unique_stg_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "tag_id"}, "error": null, "status": null, "execution_time": 0.022811174392700195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.790261Z", "completed_at": "2020-08-07T18:56:48.806627Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.810654Z", "completed_at": "2020-08-07T18:56:48.810662Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.07560014724731445, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.800561Z", "completed_at": "2020-08-07T18:56:48.811719Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.864727Z", "completed_at": "2020-08-07T18:56:48.864736Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_asana_task_follower') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_follower_user_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_follower_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_follower_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_follower_user_id", "resource_type": "test", "alias": "not_null_stg_asana_task_follower_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_follower"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_follower"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_follower_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere user_id is null\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.026859045028686523, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.841788Z", "completed_at": "2020-08-07T18:56:48.866100Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.866879Z", "completed_at": "2020-08-07T18:56:48.866886Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_task_task_id"], "unique_id": "test.asana_source.unique_stg_asana_task_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_task_task_id", "resource_type": "test", "alias": "unique_stg_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.06870079040527344, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.811088Z", "completed_at": "2020-08-07T18:56:48.867217Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.868295Z", "completed_at": "2020-08-07T18:56:48.868301Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task_follower') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_follower_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_follower_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_follower_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_follower_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_follower_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_follower"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_follower"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_follower_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.084503173828125, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.811290Z", "completed_at": "2020-08-07T18:56:48.867604Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.868859Z", "completed_at": "2020-08-07T18:56:48.868868Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ ref('stg_asana_task_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_section_section_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_section_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_section_section_id", "resource_type": "test", "alias": "not_null_stg_asana_task_section_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_section_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere section_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere section_id is null\n\n", "column_name": "section_id"}, "error": null, "status": null, "execution_time": 0.03335690498352051, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.888909Z", "completed_at": "2020-08-07T18:56:48.908696Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.919935Z", "completed_at": "2020-08-07T18:56:48.919942Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_section_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_section_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_section_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_section_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_section_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_section_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.042263031005859375, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.898892Z", "completed_at": "2020-08-07T18:56:48.920985Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.921897Z", "completed_at": "2020-08-07T18:56:48.921901Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ ref('stg_asana_task_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_tag_tag_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_tag_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_tag_tag_id", "resource_type": "test", "alias": "not_null_stg_asana_task_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere tag_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere tag_id is null\n\n", "column_name": "tag_id"}, "error": null, "status": null, "execution_time": 0.022044897079467773, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.921219Z", "completed_at": "2020-08-07T18:56:48.931460Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.932363Z", "completed_at": "2020-08-07T18:56:48.932393Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_tag_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_tag_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_tag_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_tag_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_tag_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_tag_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.03514599800109863, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.931969Z", "completed_at": "2020-08-07T18:56:48.942751Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:48.964711Z", "completed_at": "2020-08-07T18:56:48.964719Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_user_user_id"], "unique_id": "test.asana_source.not_null_stg_asana_user_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_user_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_user_user_id", "resource_type": "test", "alias": "not_null_stg_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\nwhere user_id is null\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.03753805160522461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.984013Z", "completed_at": "2020-08-07T18:56:49.013987Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.014938Z", "completed_at": "2020-08-07T18:56:49.014946Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_user_user_id"], "unique_id": "test.asana_source.unique_stg_asana_user_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_user_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_user_user_id", "resource_type": "test", "alias": "unique_stg_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.0330500602722168, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.993998Z", "completed_at": "2020-08-07T18:56:49.015198Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.015824Z", "completed_at": "2020-08-07T18:56:49.015828Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ ref('stg_asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_team_team_id"], "unique_id": "test.asana_source.not_null_stg_asana_team_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_team_team_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_team_team_id", "resource_type": "test", "alias": "not_null_stg_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\nwhere team_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\nwhere team_id is null\n\n", "column_name": "team_id"}, "error": null, "status": null, "execution_time": 0.04185080528259277, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:48.994110Z", "completed_at": "2020-08-07T18:56:49.015990Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.016769Z", "completed_at": "2020-08-07T18:56:49.016775Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ ref('stg_asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_team_team_id"], "unique_id": "test.asana_source.unique_stg_asana_team_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_team_team_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_team_team_id", "resource_type": "test", "alias": "unique_stg_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "team_id"}, "error": null, "status": null, "execution_time": 0.023389816284179688, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.016168Z", "completed_at": "2020-08-07T18:56:49.026523Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.027252Z", "completed_at": "2020-08-07T18:56:49.027258Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_projects') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_projects_task_id"], "unique_id": "test.asana.not_null_asana_task_projects_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_projects_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_projects_task_id", "resource_type": "test", "alias": "not_null_asana_task_projects_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_projects"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_projects"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_projects_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_projects\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_projects", "sql": " __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_projects\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.039337158203125, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.026716Z", "completed_at": "2020-08-07T18:56:49.062376Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.063467Z", "completed_at": "2020-08-07T18:56:49.063474Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_projects') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_projects_task_id"], "unique_id": "test.asana.unique_asana_task_projects_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_projects_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_projects_task_id", "resource_type": "test", "alias": "unique_asana_task_projects_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_projects"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_projects"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_projects_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_projects\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_projects", "sql": " __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_projects\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.03877115249633789, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.037274Z", "completed_at": "2020-08-07T18:56:49.063170Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.063963Z", "completed_at": "2020-08-07T18:56:49.063967Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_tags') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_tags_task_id"], "unique_id": "test.asana.not_null_asana_task_tags_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_tags_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_tags_task_id", "resource_type": "test", "alias": "not_null_asana_task_tags_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_tags"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_tags"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_tags_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_tags\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_tags", "sql": " __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_tags\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.04927802085876465, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.049910Z", "completed_at": "2020-08-07T18:56:49.064123Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.064964Z", "completed_at": "2020-08-07T18:56:49.064968Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_tags') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_tags_task_id"], "unique_id": "test.asana.unique_asana_task_tags_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_tags_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_tags_task_id", "resource_type": "test", "alias": "unique_asana_task_tags_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_tags"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_tags"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_tags_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_tags\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_tags", "sql": " __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_tags\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.024885892868041992, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.064599Z", "completed_at": "2020-08-07T18:56:49.077214Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.077833Z", "completed_at": "2020-08-07T18:56:49.077839Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_followers') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_followers_task_id"], "unique_id": "test.asana.not_null_asana_task_followers_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_followers_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_followers_task_id", "resource_type": "test", "alias": "not_null_asana_task_followers_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_followers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_followers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_followers_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_followers\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_followers", "sql": " __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_followers\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.07278275489807129, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.077729Z", "completed_at": "2020-08-07T18:56:49.120453Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.143967Z", "completed_at": "2020-08-07T18:56:49.143978Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_followers') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_followers_task_id"], "unique_id": "test.asana.unique_asana_task_followers_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_followers_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_followers_task_id", "resource_type": "test", "alias": "unique_asana_task_followers_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_followers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_followers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_followers_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_followers\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_followers", "sql": " __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_followers\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.0740962028503418, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.078027Z", "completed_at": "2020-08-07T18:56:49.127116Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.148788Z", "completed_at": "2020-08-07T18:56:49.148795Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_assignee') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_assignee_task_id"], "unique_id": "test.asana.unique_asana_task_assignee_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_assignee_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_assignee_task_id", "resource_type": "test", "alias": "unique_asana_task_assignee_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_assignee"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_assignee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_assignee_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_assignee\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_assignee\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.0731351375579834, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.157448Z", "completed_at": "2020-08-07T18:56:49.216340Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.222801Z", "completed_at": "2020-08-07T18:56:49.222813Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_assignee') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_assignee_task_id"], "unique_id": "test.asana.not_null_asana_task_assignee_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_assignee_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_assignee_task_id", "resource_type": "test", "alias": "not_null_asana_task_assignee_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_assignee"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_assignee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_assignee_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_assignee\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_assignee\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.07437372207641602, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.157215Z", "completed_at": "2020-08-07T18:56:49.222365Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.227244Z", "completed_at": "2020-08-07T18:56:49.227253Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "story_id", "model": "{{ ref('asana_task_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_story_story_id"], "unique_id": "test.asana.not_null_asana_task_story_story_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_story_story_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_story_story_id", "resource_type": "test", "alias": "not_null_asana_task_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_story\nwhere story_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_story\nwhere story_id is null\n\n", "column_name": "story_id"}, "error": null, "status": null, "execution_time": 0.06499195098876953, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.232157Z", "completed_at": "2020-08-07T18:56:49.293450Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.294368Z", "completed_at": "2020-08-07T18:56:49.294376Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "story_id", "model": "{{ ref('asana_task_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_story_story_id"], "unique_id": "test.asana.unique_asana_task_story_story_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_story_story_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_story_story_id", "resource_type": "test", "alias": "unique_asana_task_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from __dbt__CTE__asana_task_story\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)select count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from __dbt__CTE__asana_task_story\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "story_id"}, "error": null, "status": null, "execution_time": 0.0656898021697998, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.259743Z", "completed_at": "2020-08-07T18:56:49.294650Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.295828Z", "completed_at": "2020-08-07T18:56:49.295834Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "subtask_id", "model": "{{ ref('asana_subtask_parent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_subtask_parent_subtask_id"], "unique_id": "test.asana.not_null_asana_subtask_parent_subtask_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_subtask_parent_subtask_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_subtask_parent_subtask_id", "resource_type": "test", "alias": "not_null_asana_subtask_parent_subtask_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_subtask_parent"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_subtask_parent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_subtask_parent_subtask_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_subtask_parent\nwhere subtask_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_subtask_parent", "sql": " __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_subtask_parent\nwhere subtask_id is null\n\n", "column_name": "subtask_id"}, "error": null, "status": null, "execution_time": 0.06551980972290039, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.269056Z", "completed_at": "2020-08-07T18:56:49.294846Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.296062Z", "completed_at": "2020-08-07T18:56:49.296067Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "subtask_id", "model": "{{ ref('asana_subtask_parent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_subtask_parent_subtask_id"], "unique_id": "test.asana.unique_asana_subtask_parent_subtask_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_subtask_parent_subtask_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_subtask_parent_subtask_id", "resource_type": "test", "alias": "unique_asana_subtask_parent_subtask_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_subtask_parent"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_subtask_parent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_subtask_parent_subtask_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        subtask_id\n\n    from __dbt__CTE__asana_subtask_parent\n    where subtask_id is not null\n    group by subtask_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_subtask_parent", "sql": " __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)select count(*) as validation_errors\nfrom (\n\n    select\n        subtask_id\n\n    from __dbt__CTE__asana_subtask_parent\n    where subtask_id is not null\n    group by subtask_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "subtask_id"}, "error": null, "status": null, "execution_time": 0.06291890144348145, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.298565Z", "completed_at": "2020-08-07T18:56:49.329629Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.340761Z", "completed_at": "2020-08-07T18:56:49.340769Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id || '-' || user_id || '-' || role || '-' || currently_working_on", "model": "{{ ref('asana_project_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_project_user_project_id_user_id_role_currently_working_on"], "unique_id": "test.asana.unique_asana_project_user_project_id_user_id_role_currently_working_on", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_project_user_87c5a20e1cf302266ce130e0c24d01d4.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_project_user_project_id_user_id_role_currently_working_on", "resource_type": "test", "alias": "unique_asana_project_user_project_id_user_id_role_currently_working_on", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_project_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_project_user_87c5a20e1cf302266ce130e0c24d01d4.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n\n    from __dbt__CTE__asana_project_user\n    where project_id || '-' || user_id || '-' || role || '-' || currently_working_on is not null\n    group by project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_project_user", "sql": " __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)select count(*) as validation_errors\nfrom (\n\n    select\n        project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n\n    from __dbt__CTE__asana_project_user\n    where project_id || '-' || user_id || '-' || role || '-' || currently_working_on is not null\n    group by project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": null}, "error": null, "status": null, "execution_time": 0.06316280364990234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.313012Z", "completed_at": "2020-08-07T18:56:49.347080Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.359548Z", "completed_at": "2020-08-07T18:56:49.359555Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_comments') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_comments_task_id"], "unique_id": "test.asana.not_null_asana_task_comments_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_comments_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_comments_task_id", "resource_type": "test", "alias": "not_null_asana_task_comments_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_comments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_comments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_comments_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_comments\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_comments", "sql": " __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_comments\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.06406092643737793, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.329501Z", "completed_at": "2020-08-07T18:56:49.359999Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.361158Z", "completed_at": "2020-08-07T18:56:49.361166Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_comments') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_comments_task_id"], "unique_id": "test.asana.unique_asana_task_comments_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_comments_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_comments_task_id", "resource_type": "test", "alias": "unique_asana_task_comments_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_comments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_comments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_comments_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_comments\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_comments", "sql": " __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_comments\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.06552886962890625, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.329874Z", "completed_at": "2020-08-07T18:56:49.361975Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.363272Z", "completed_at": "2020-08-07T18:56:49.363280Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_first_modifier') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_first_modifier_task_id"], "unique_id": "test.asana.not_null_asana_task_first_modifier_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_first_modifier_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_first_modifier_task_id", "resource_type": "test", "alias": "not_null_asana_task_first_modifier_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_first_modifier"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_first_modifier"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_first_modifier_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_first_modifier\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_first_modifier", "sql": " __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_first_modifier\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.046679019927978516, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.364129Z", "completed_at": "2020-08-07T18:56:49.393906Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.395700Z", "completed_at": "2020-08-07T18:56:49.395713Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_first_modifier') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_first_modifier_task_id"], "unique_id": "test.asana.unique_asana_task_first_modifier_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_first_modifier_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_first_modifier_task_id", "resource_type": "test", "alias": "unique_asana_task_first_modifier_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_first_modifier"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_first_modifier"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_first_modifier_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_first_modifier\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_first_modifier", "sql": " __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_first_modifier\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.15699505805969238, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.376999Z", "completed_at": "2020-08-07T18:56:49.407232Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.468567Z", "completed_at": "2020-08-07T18:56:49.468584Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_open_length') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_open_length_task_id"], "unique_id": "test.asana.not_null_asana_task_open_length_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_open_length_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_open_length_task_id", "resource_type": "test", "alias": "not_null_asana_task_open_length_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_open_length"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_open_length"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_open_length_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_open_length\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_open_length", "sql": " __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_open_length\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.16900992393493652, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.406776Z", "completed_at": "2020-08-07T18:56:49.527135Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.545439Z", "completed_at": "2020-08-07T18:56:49.545464Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with task as (\n    select *\n    from {{ var('task') }}\n),\n\ntask_comments as (\n\n    select * \n    from {{ ref('asana_task_comments') }}\n),\n\ntask_followers as (\n\n    select *\n    from {{ ref('asana_task_followers') }}\n),\n\ntask_open_length as (\n\n    select *\n    from {{ ref('asana_task_open_length') }}\n),\n\ntask_tags as (\n\n    select *\n    from {{ ref('asana_task_tags') }}\n),\n\ntask_assignee as (\n\n    select * \n    from  {{ ref('asana_task_assignee') }}\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from {{ ref('asana_task_projects') }}\n),\n\nsubtask_parent as (\n\n    select * \n    from {{ ref('asana_subtask_parent') }}\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from {{ ref('asana_task_first_modifier') }}\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_task"], "unique_id": "model.asana.asana_task", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_task.sql", "original_file_path": "models/asana_task.sql", "name": "asana_task", "resource_type": "model", "alias": "asana_task", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_task"], ["asana_task_comments"], ["asana_task_followers"], ["asana_task_open_length"], ["asana_task_tags"], ["asana_task_assignee"], ["asana_task_projects"], ["asana_subtask_parent"], ["asana_task_first_modifier"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_task", "model.asana.asana_task_comments", "model.asana.asana_task_followers", "model.asana.asana_task_open_length", "model.asana.asana_task_tags", "model.asana.asana_task_assignee", "model.asana.asana_task_projects", "model.asana.asana_subtask_parent", "model.asana.asana_task_first_modifier"]}, "description": "An enriched task table consisting of base task info + aggregated metrics and lists", "columns": {"task_id": {"name": "task_id", "description": "System generated unique ID of the task.", "meta": {}, "data_type": null, "tags": []}, "task_name": {"name": "task_name", "description": "User-facing name of the task", "meta": {}, "data_type": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ASANA_USER that is currently assigned the task.", "meta": {}, "data_type": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "Name of the user that the task is currently assigned to.", "meta": {}, "data_type": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email of the user that the task is currently assigned to.", "meta": {}, "data_type": null, "tags": []}, "assignee_status": {"name": "assignee_status", "description": "Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of \"My Tasks\"", "meta": {}, "data_type": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean that is true if the task is currently marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_by_user_id": {"name": "completed_by_user_id", "description": "Foreign key referencing the USER who completed the task. Note that this may be different than the assignee", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was created", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date the task is due, if provided.", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the task was last modified", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the task, if a date range is given.", "meta": {}, "data_type": null, "tags": []}, "task_description": {"name": "task_description", "description": "Free-form text describing the task, as seen in the UI.", "meta": {}, "data_type": null, "tags": []}, "task_link": {"name": "task_link", "description": "URL formatted to bring you directly to the task in asana.", "meta": {}, "data_type": null, "tags": []}, "days_open": {"name": "days_open", "description": "The number of days the task has been/was open (creation -> completion)", "meta": {}, "data_type": null, "tags": []}, "is_currently_assigned": {"name": "is_currently_assigned", "description": "Boolean, true if the task is *currently* assigned", "meta": {}, "data_type": null, "tags": []}, "has_been_assigned": {"name": "has_been_assigned", "description": "Boolean, true if the task has at one point been assigned, even if currently not.", "meta": {}, "data_type": null, "tags": []}, "days_since_last_assignment": {"name": "days_since_last_assignment", "description": "The number of days the task has been/was open and assigned to to the most recent user (last assignment -> completion)", "meta": {}, "data_type": null, "tags": []}, "days_since_first_assignment": {"name": "days_since_first_assignment", "description": "The number of days the task has been/was open and assigned at all (first time assigned -> completion)", "meta": {}, "data_type": null, "tags": []}, "last_assigned_at": {"name": "last_assigned_at", "description": "Timestamp of when the task was last assigned (to the current user if still assigned)", "meta": {}, "data_type": null, "tags": []}, "first_assigned_At": {"name": "first_assigned_At", "description": "Timestamp of when the task was first assigned to someone", "meta": {}, "data_type": null, "tags": []}, "first_modifier_user_id": {"name": "first_modifier_user_id", "description": "Foreign key referencing the ASANA_USER who made the first modification to the task (ie added a description). A proxy for task creator.", "meta": {}, "data_type": null, "tags": []}, "first_modifier_name": {"name": "first_modifier_name", "description": "Name of the user who made the first modification to the task", "meta": {}, "data_type": null, "tags": []}, "number_of_comments": {"name": "number_of_comments", "description": "Count of comments made on the task", "meta": {}, "data_type": null, "tags": []}, "conversation": {"name": "conversation", "description": "The task's comments and authors aggregated into an ordered conversation, with authors + time sent", "meta": {}, "data_type": null, "tags": []}, "followers": {"name": "followers", "description": "A list of the names of the users who follow the task.", "meta": {}, "data_type": null, "tags": []}, "number_of_followers": {"name": "number_of_followers", "description": "Count of the users following the task", "meta": {}, "data_type": null, "tags": []}, "tags": {"name": "tags", "description": "A list of the tags associated with the task.", "meta": {}, "data_type": null, "tags": []}, "number_of_tags": {"name": "number_of_tags", "description": "Count of the tags associated with the task.", "meta": {}, "data_type": null, "tags": []}, "projects_sections": {"name": "projects_sections", "description": "A list of the projects + sections that this task is listed under.", "meta": {}, "data_type": null, "tags": []}, "is_subtask": {"name": "is_subtask", "description": "Boolean that's true if the task is a subtask of another.", "meta": {}, "data_type": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Self-referential id of the parent TASK that this is a subtask of.", "meta": {}, "data_type": null, "tags": []}, "parent_task_name": {"name": "parent_task_name", "description": "User-facing name of the task's parent task.", "meta": {}, "data_type": null, "tags": []}, "parent_assignee_user_id": {"name": "parent_assignee_user_id", "description": "Foreign key referencing the ASANA_USER who is assigned the parent task", "meta": {}, "data_type": null, "tags": []}, "parent_assignee_name": {"name": "parent_assignee_name", "description": "Name of the user assigned this task's parent task", "meta": {}, "data_type": null, "tags": []}, "parent_due_date": {"name": "parent_due_date", "description": "Date on which the parent task is due, if given", "meta": {}, "data_type": null, "tags": []}, "parent_created_at": {"name": "parent_created_at", "description": "Timestamp of when the parent task was created", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_task.sql", "compiled": true, "compiled_sql": "with task as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n),\n\ntask_comments as (\n\n    select * \n    from __dbt__CTE__asana_task_comments\n),\n\ntask_followers as (\n\n    select *\n    from __dbt__CTE__asana_task_followers\n),\n\ntask_open_length as (\n\n    select *\n    from __dbt__CTE__asana_task_open_length\n),\n\ntask_tags as (\n\n    select *\n    from __dbt__CTE__asana_task_tags\n),\n\ntask_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from __dbt__CTE__asana_task_projects\n),\n\nsubtask_parent as (\n\n    select * \n    from __dbt__CTE__asana_subtask_parent\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from __dbt__CTE__asana_task_first_modifier\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_comments", "sql": " __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}, {"id": "model.asana.asana_task_followers", "sql": " __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}, {"id": "model.asana.asana_task_open_length", "sql": " __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}, {"id": "model.asana.asana_task_tags", "sql": " __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}, {"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_task_projects", "sql": " __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}, {"id": "model.asana.asana_subtask_parent", "sql": " __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}, {"id": "model.asana.asana_task_first_modifier", "sql": " __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n),  __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n),  __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n),  __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n),  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n),  __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n),  __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n),task as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n),\n\ntask_comments as (\n\n    select * \n    from __dbt__CTE__asana_task_comments\n),\n\ntask_followers as (\n\n    select *\n    from __dbt__CTE__asana_task_followers\n),\n\ntask_open_length as (\n\n    select *\n    from __dbt__CTE__asana_task_open_length\n),\n\ntask_tags as (\n\n    select *\n    from __dbt__CTE__asana_task_tags\n),\n\ntask_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from __dbt__CTE__asana_task_projects\n),\n\nsubtask_parent as (\n\n    select * \n    from __dbt__CTE__asana_subtask_parent\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from __dbt__CTE__asana_task_first_modifier\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join"}, "error": null, "status": null, "execution_time": 0.18909406661987305, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.395361Z", "completed_at": "2020-08-07T18:56:49.552081Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.553163Z", "completed_at": "2020-08-07T18:56:49.553173Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_open_length') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_open_length_task_id"], "unique_id": "test.asana.unique_asana_task_open_length_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_open_length_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_open_length_task_id", "resource_type": "test", "alias": "unique_asana_task_open_length_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_open_length"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_open_length"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_open_length_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_open_length\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_open_length", "sql": " __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_open_length\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.13084626197814941, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.526838Z", "completed_at": "2020-08-07T18:56:49.554531Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.554971Z", "completed_at": "2020-08-07T18:56:49.554981Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with asana_tag as (\n\n    select * \n    from {{ var('tag') }}\n),\n\ntask_tag as (\n\n    select * \n    from {{ var('task_tag') }}\n),\n\ntask as (\n\n    select *\n    from {{ ref('asana_task') }}\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_tag"], "unique_id": "model.asana.asana_tag", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_tag.sql", "original_file_path": "models/asana_tag.sql", "name": "asana_tag", "resource_type": "model", "alias": "asana_tag", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_tag"], ["stg_asana_task_tag"], ["asana_task"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_tag", "model.asana_source.stg_asana_task_tag", "model.asana.asana_task"]}, "description": "Table of tag basic info enriched with some task metrics.", "columns": {"tag_id": {"name": "tag_id", "description": "System-gemerated unique ID for the tag", "meta": {}, "data_type": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "UI-facing name of the tag", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks with this tag.", "meta": {}, "data_type": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks with this tag.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks with this tag that have been completed.", "meta": {}, "data_type": null, "tags": []}, "avg_days_open": {"name": "avg_days_open", "description": "The avg number of days that completed tasks with this tag were open.", "meta": {}, "data_type": null, "tags": []}, "avg_days_assigned": {"name": "avg_days_assigned", "description": "The avg number of days that completed tasks with this tag were open and assigned.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_tag.sql", "compiled": true, "compiled_sql": "with asana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n),\n\ntask_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n),\n\ntask as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with asana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n),\n\ntask_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n),\n\ntask as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag"}, "error": null, "status": null, "execution_time": 0.11606669425964355, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.571468Z", "completed_at": "2020-08-07T18:56:49.662957Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.665092Z", "completed_at": "2020-08-07T18:56:49.665103Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_task_id"], "unique_id": "test.asana.not_null_asana_task_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_task_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_task_task_id", "resource_type": "test", "alias": "not_null_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_task`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_task`\nwhere task_id is null\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.09047508239746094, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.666001Z", "completed_at": "2020-08-07T18:56:49.719065Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.747693Z", "completed_at": "2020-08-07T18:56:49.747709Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_user_task_metrics_user_id"], "unique_id": "test.asana.not_null_asana_user_task_metrics_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_user_task_metrics_user_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_user_task_metrics_user_id", "resource_type": "test", "alias": "not_null_asana_user_task_metrics_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_user_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_user_task_metrics_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_user_task_metrics\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_user_task_metrics", "sql": " __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_user_task_metrics\nwhere user_id is null\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.03618288040161133, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.749428Z", "completed_at": "2020-08-07T18:56:49.784110Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:49.784488Z", "completed_at": "2020-08-07T18:56:49.784499Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_task_id"], "unique_id": "test.asana.unique_asana_task_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_task_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_task_task_id", "resource_type": "test", "alias": "unique_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "error": null, "status": null, "execution_time": 0.4732677936553955, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.700147Z", "completed_at": "2020-08-07T18:56:49.798053Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.142935Z", "completed_at": "2020-08-07T18:56:50.142944Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with user_task_metrics as (\n\n    select * \n    from {{ ref('asana_user_task_metrics') }}\n),\n\nasana_user as (\n    select * \n    from {{ var('user') }}\n),\n\nproject_user as (\n    \n    select * \n    from {{ ref('asana_project_user') }}\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    {{ string_agg( 'project_name', \"', '\" )}} as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        count_user_projects.number_of_projects_owned,\n        count_user_projects.number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_user"], "unique_id": "model.asana.asana_user", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_user.sql", "original_file_path": "models/asana_user.sql", "name": "asana_user", "resource_type": "model", "alias": "asana_user", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_user_task_metrics"], ["stg_asana_user"], ["asana_project_user"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana.asana_user_task_metrics", "model.asana_source.stg_asana_user", "model.asana.asana_project_user"]}, "description": "Enriched user table consisting of base user info + metrics around tasks and completions", "columns": {"user_id": {"name": "user_id", "description": "System generated unique ID of the user", "meta": {}, "data_type": null, "tags": []}, "user_name": {"name": "user_name", "description": "Name of the user as it appears in the UI", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The user's email", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks assigned to this user", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of the tasks that this user has completed", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken the user to complete tasks once assigned to them.", "meta": {}, "data_type": null, "tags": []}, "number_of_projects_owned": {"name": "number_of_projects_owned", "description": "Count of the projects that this user is the owner of (excludes archived projects)", "meta": {}, "data_type": null, "tags": []}, "number_of_projects_currently_assigned_to": {"name": "number_of_projects_currently_assigned_to", "description": "Count of the projects that the user is currently assigned open tasks to.", "meta": {}, "data_type": null, "tags": []}, "projects_working_on": {"name": "projects_working_on", "description": "Aggregated list of the projects that the user is currently assigned to or owns", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_user.sql", "compiled": true, "compiled_sql": "with user_task_metrics as (\n\n    select * \n    from __dbt__CTE__asana_user_task_metrics\n),\n\nasana_user as (\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nproject_user as (\n    \n    select * \n    from __dbt__CTE__asana_project_user\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    \n    string_agg(project_name, ', ')\n\n as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        count_user_projects.number_of_projects_owned,\n        count_user_projects.number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_user_task_metrics", "sql": " __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_project_user", "sql": " __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "injected_sql": "with  __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n),  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),user_task_metrics as (\n\n    select * \n    from __dbt__CTE__asana_user_task_metrics\n),\n\nasana_user as (\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nproject_user as (\n    \n    select * \n    from __dbt__CTE__asana_project_user\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    \n    string_agg(project_name, ', ')\n\n as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        count_user_projects.number_of_projects_owned,\n        count_user_projects.number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join"}, "error": null, "status": null, "execution_time": 0.46221303939819336, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.718940Z", "completed_at": "2020-08-07T18:56:50.144404Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.150578Z", "completed_at": "2020-08-07T18:56:50.150590Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_user_task_metrics_user_id"], "unique_id": "test.asana.unique_asana_user_task_metrics_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_user_task_metrics_user_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_user_task_metrics_user_id", "resource_type": "test", "alias": "unique_asana_user_task_metrics_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_user_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_user_task_metrics_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__asana_user_task_metrics\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_user_task_metrics", "sql": " __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__asana_user_task_metrics\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.43265295028686523, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.802084Z", "completed_at": "2020-08-07T18:56:50.169424Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.191154Z", "completed_at": "2020-08-07T18:56:50.191165Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_project_task_metrics_project_id"], "unique_id": "test.asana.not_null_asana_project_task_metrics_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_project_task_metrics_project_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_project_task_metrics_project_id", "resource_type": "test", "alias": "not_null_asana_project_task_metrics_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_project_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_project_task_metrics_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_project_task_metrics\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_project_task_metrics", "sql": " __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_project_task_metrics\nwhere project_id is null\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.08982396125793457, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.212029Z", "completed_at": "2020-08-07T18:56:50.250375Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.251946Z", "completed_at": "2020-08-07T18:56:50.251956Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with project_task_metrics as (\n\n    select *\n    from {{ ref('asana_project_task_metrics') }}\n),\n\nproject as (\n    \n    select *\n    from {{ var('project') }}\n),\n\nproject_user as (\n    \n    select *\n    from {{ ref('asana_project_user') }}\n),\n\nasana_user as (\n    select *\n    from {{ var('user') }}\n),\n\nteam as (\n    select *\n    from {{ var('team') }}\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        {{ string_agg( 'section_name', \"', '\") }} as sections\n\n    from {{ var('section') }}\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        {{ string_agg( \"asana_user.user_name || ' as ' || project_user.role\" , \"', '\" ) }} as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        count_project_users.number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_project"], "unique_id": "model.asana.asana_project", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_project.sql", "original_file_path": "models/asana_project.sql", "name": "asana_project", "resource_type": "model", "alias": "asana_project", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_project_task_metrics"], ["stg_asana_project"], ["asana_project_user"], ["stg_asana_user"], ["stg_asana_team"], ["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana.asana_project_task_metrics", "model.asana_source.stg_asana_project", "model.asana.asana_project_user", "model.asana_source.stg_asana_user", "model.asana_source.stg_asana_team", "model.asana_source.stg_asana_section"]}, "description": "Table of projects' basic info enriched with metrics regarding tasks and completions", "columns": {"project_id": {"name": "project_id", "description": "System-generated unique ID of the project.", "meta": {}, "data_type": null, "tags": []}, "project_name": {"name": "project_name", "description": "UI-facing name of the project", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks in this project", "meta": {}, "data_type": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks in this project.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks that have been completed in this project", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken to close tasks in this project", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_assigned_days": {"name": "avg_close_time_assigned_days", "description": "The avg number of days it has taken to close tasks, since their *last* assignment, in this project", "meta": {}, "data_type": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the ASANA_TEAM that the project is associated with", "meta": {}, "data_type": null, "tags": []}, "team_name": {"name": "team_name", "description": "User-facing name of the project's team", "meta": {}, "data_type": null, "tags": []}, "is_archived": {"name": "is_archived", "description": "Boolean representing if the project has been arhcived in the UI", "meta": {}, "data_type": null, "tags": []}, "project_link": {"name": "project_link", "description": "URL formatted to bring you directly to the project in asana.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the project was created", "meta": {}, "data_type": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project (free-form string)", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due on, if given", "meta": {}, "data_type": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "Timestamp of when the project was last modified (doesn't include comments or tasks)", "meta": {}, "data_type": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "tags": []}, "users_involved": {"name": "users_involved", "description": "Aggregated list of the names + roles of the users involved (working on or owning) a project", "meta": {}, "data_type": null, "tags": []}, "number_of_users_involved": {"name": "number_of_users_involved", "description": "Count of the unique users associated with the project", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that's true if public to the whole workspace, false if private.", "meta": {}, "data_type": null, "tags": []}, "sections": {"name": "sections", "description": "Aggregated list of the sections that exist in the project.", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual description associated with project", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_project.sql", "compiled": true, "compiled_sql": "with project_task_metrics as (\n\n    select *\n    from __dbt__CTE__asana_project_task_metrics\n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\nproject_user as (\n    \n    select *\n    from __dbt__CTE__asana_project_user\n),\n\nasana_user as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nteam as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        \n    string_agg(section_name, ', ')\n\n as sections\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        \n    string_agg(asana_user.user_name || ' as ' || project_user.role, ', ')\n\n as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        count_project_users.number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_project_task_metrics", "sql": " __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_project_user", "sql": " __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "injected_sql": "with  __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n),  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),project_task_metrics as (\n\n    select *\n    from __dbt__CTE__asana_project_task_metrics\n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\nproject_user as (\n    \n    select *\n    from __dbt__CTE__asana_project_user\n),\n\nasana_user as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nteam as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        \n    string_agg(section_name, ', ')\n\n as sections\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        \n    string_agg(asana_user.user_name || ' as ' || project_user.role, ', ')\n\n as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        count_project_users.number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join"}, "error": null, "status": null, "execution_time": 0.09704136848449707, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.163547Z", "completed_at": "2020-08-07T18:56:50.250773Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.252474Z", "completed_at": "2020-08-07T18:56:50.252482Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_project_task_metrics_project_id"], "unique_id": "test.asana.unique_asana_project_task_metrics_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_project_task_metrics_project_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_project_task_metrics_project_id", "resource_type": "test", "alias": "unique_asana_project_task_metrics_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_project_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_project_task_metrics_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from __dbt__CTE__asana_project_task_metrics\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_project_task_metrics", "sql": " __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from __dbt__CTE__asana_project_task_metrics\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.05257391929626465, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.254174Z", "completed_at": "2020-08-07T18:56:50.278685Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.279439Z", "completed_at": "2020-08-07T18:56:50.279447Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ ref('asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_tag_tag_id"], "unique_id": "test.asana.not_null_asana_tag_tag_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_tag_tag_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_tag_tag_id", "resource_type": "test", "alias": "not_null_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_tag`\nwhere tag_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_tag`\nwhere tag_id is null\n\n", "column_name": "tag_id"}, "error": null, "status": null, "execution_time": 0.04592180252075195, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.279144Z", "completed_at": "2020-08-07T18:56:50.305894Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.306684Z", "completed_at": "2020-08-07T18:56:50.306694Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ ref('asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_tag_tag_id"], "unique_id": "test.asana.unique_asana_tag_tag_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_tag_tag_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_tag_tag_id", "resource_type": "test", "alias": "unique_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "tag_id"}, "error": null, "status": null, "execution_time": 0.045539140701293945, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.279270Z", "completed_at": "2020-08-07T18:56:50.306407Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.317578Z", "completed_at": "2020-08-07T18:56:50.317593Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_user_user_id"], "unique_id": "test.asana.not_null_asana_user_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_user_user_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_user_user_id", "resource_type": "test", "alias": "not_null_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_user`\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_user`\nwhere user_id is null\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.07079100608825684, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.306222Z", "completed_at": "2020-08-07T18:56:50.336573Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.357195Z", "completed_at": "2020-08-07T18:56:50.357211Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_user_user_id"], "unique_id": "test.asana.unique_asana_user_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_user_user_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_user_user_id", "resource_type": "test", "alias": "unique_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id"}, "error": null, "status": null, "execution_time": 0.055162668228149414, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.325437Z", "completed_at": "2020-08-07T18:56:50.376606Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.377857Z", "completed_at": "2020-08-07T18:56:50.377864Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with team as (\n\n    select * from {{ var('team') }}\n),\n\nproject as (\n\n    select * \n    from {{ ref('asana_project') }}\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        {{ string_agg('case when not project.is_archived then project.project_name else null end', \"', '\") }} as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_team"], "unique_id": "model.asana.asana_team", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_team.sql", "original_file_path": "models/asana_team.sql", "name": "asana_team", "resource_type": "model", "alias": "asana_team", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_team"], ["asana_project"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana_source.stg_asana_team", "model.asana.asana_project"]}, "description": "Enriched team table consisting of basic team info + task/completion metrics (note that teams can only act on tasks in projects)", "columns": {"team_id": {"name": "team_id", "description": "System generate unique ID for the team", "meta": {}, "data_type": null, "tags": []}, "team_name": {"name": "team_name", "description": "UI-facing name of the team.", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks for this team.", "meta": {}, "data_type": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks for the team.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks that this team has completed.", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken projects of this team to close tasks.", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_assigned_days": {"name": "avg_close_time_assigned_days", "description": "The avg number of days it has taken projects of this team to close tasks, once assigned", "meta": {}, "data_type": null, "tags": []}, "active_projects": {"name": "active_projects", "description": "Aggregated list of non archived projects associated with the team", "meta": {}, "data_type": null, "tags": []}, "number_of_active_projects": {"name": "number_of_active_projects", "description": "Count of non-archived projects", "meta": {}, "data_type": null, "tags": []}, "number_of_archived_projects": {"name": "number_of_archived_projects", "description": "Count of archived projects", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_team.sql", "compiled": true, "compiled_sql": "with team as (\n\n    select * from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        \n    string_agg(case when not project.is_archived then project.project_name else null end, ', ')\n\n as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with team as (\n\n    select * from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        \n    string_agg(case when not project.is_archived then project.project_name else null end, ', ')\n\n as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join"}, "error": null, "status": null, "execution_time": 0.054968833923339844, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.325677Z", "completed_at": "2020-08-07T18:56:50.377571Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.378296Z", "completed_at": "2020-08-07T18:56:50.378306Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_project_project_id"], "unique_id": "test.asana.not_null_asana_project_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_project_project_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_project_project_id", "resource_type": "test", "alias": "not_null_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_project`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_project`\nwhere project_id is null\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.054594993591308594, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.379043Z", "completed_at": "2020-08-07T18:56:50.418996Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.430901Z", "completed_at": "2020-08-07T18:56:50.430911Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_project_project_id"], "unique_id": "test.asana.unique_asana_project_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_project_project_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_project_project_id", "resource_type": "test", "alias": "unique_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "project_id"}, "error": null, "status": null, "execution_time": 0.04103398323059082, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.394937Z", "completed_at": "2020-08-07T18:56:50.432789Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.433282Z", "completed_at": "2020-08-07T18:56:50.433291Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ ref('asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_team_team_id"], "unique_id": "test.asana.not_null_asana_team_team_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_team_team_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_team_team_id", "resource_type": "test", "alias": "not_null_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_team`\nwhere team_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_team`\nwhere team_id is null\n\n", "column_name": "team_id"}, "error": null, "status": null, "execution_time": 0.05440878868103027, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.406374Z", "completed_at": "2020-08-07T18:56:50.433541Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.434452Z", "completed_at": "2020-08-07T18:56:50.434460Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ ref('asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_team_team_id"], "unique_id": "test.asana.unique_asana_team_team_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_team_team_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_team_team_id", "resource_type": "test", "alias": "unique_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "team_id"}, "error": null, "status": null, "execution_time": 0.01824212074279785, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:50.433880Z", "completed_at": "2020-08-07T18:56:50.449638Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:50.450089Z", "completed_at": "2020-08-07T18:56:50.450099Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with task as (\n\n    select *\n    from {{ ref('asana_task') }}\n),\n\n\nspine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( created_at )  as min_date from {{ ref('asana_task') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n    {% else %} {% set first_date = \"'2016-01-01'\" %}\n    {% endif %}\n\n\n    {{ dbt_utils.date_spine(\n        datepart = \"day\", \n        start_date =  \"'\" ~ first_date[0:10] ~ \"'\", \n        end_date = dbt_utils.dateadd(\"week\", 1, \"current_date\") ) \n    }} \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( {{ dbt_utils.datediff('task.created_at', 'spine.date_day', 'day') }} ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= {{ dbt_utils.date_trunc('day', 'task.first_assigned_at') }} then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( {{ dbt_utils.datediff('task.first_assigned_at', 'spine.date_day', 'day') }} ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = {{ dbt_utils.date_trunc('day', 'task.created_at') }} then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = {{ dbt_utils.date_trunc('day', 'task.completed_at') }} then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= {{ dbt_utils.date_trunc('day', 'task.created_at') }}\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < {{ dbt_utils.date_trunc('day', 'task.completed_at') }}\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_daily_metrics"], "unique_id": "model.asana.asana_daily_metrics", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_daily_metrics.sql", "original_file_path": "models/asana_daily_metrics.sql", "name": "asana_daily_metrics", "resource_type": "model", "alias": "asana_daily_metrics", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_spine", "macro.dbt_utils.datediff", "macro.dbt_utils.date_trunc", "macro.dbt.run_query"], "nodes": ["model.asana.asana_task"]}, "description": "Table of task metrics per each day", "columns": {"date_day": {"name": "date_day", "description": "Unique day for which metrics are calculated.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_open": {"name": "number_of_tasks_open", "description": "The number of tasks open at that point in time", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_open_assigned": {"name": "number_of_tasks_open_assigned", "description": "The number of tasks that are open on that day and have been assigned", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_created": {"name": "number_of_tasks_created", "description": "The number of tasks created on that day", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "The number of tasks completed on that day", "meta": {}, "data_type": null, "tags": []}, "avg_days_open": {"name": "avg_days_open", "description": "The average time that all tasks open on this day have spent open.", "meta": {}, "data_type": null, "tags": []}, "avg_days_open_assigned": {"name": "avg_days_open_assigned", "description": "The average time that all tasks open on this day have spent open and assigned.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_daily_metrics.sql", "compiled": true, "compiled_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n),\n\n\nspine as (\n\n    \n    \n    \n    \n    \n\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2857\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n        datetime_add(\n            cast( '2012-10-18' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n  \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n\n)\n\nselect * from filtered\n\n \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.first_assigned_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.first_assigned_at as datetime),\n        day\n    )\n\n\n ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n),\n\n\nspine as (\n\n    \n    \n    \n    \n    \n\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2857\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n        datetime_add(\n            cast( '2012-10-18' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n  \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n\n)\n\nselect * from filtered\n\n \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.first_assigned_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.first_assigned_at as datetime),\n        day\n    )\n\n\n ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc"}, "error": null, "status": null, "execution_time": 5.636734247207642, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:49.559985Z", "completed_at": "2020-08-07T18:56:55.193455Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:55.194051Z", "completed_at": "2020-08-07T18:56:55.194130Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "date_day", "model": "{{ ref('asana_daily_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_daily_metrics_date_day"], "unique_id": "test.asana.unique_asana_daily_metrics_date_day", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_daily_metrics_date_day.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_daily_metrics_date_day", "resource_type": "test", "alias": "unique_asana_daily_metrics_date_day", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_daily_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_daily_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_daily_metrics_date_day.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        date_day\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\n    where date_day is not null\n    group by date_day\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        date_day\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\n    where date_day is not null\n    group by date_day\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "date_day"}, "error": null, "status": null, "execution_time": 0.023324012756347656, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:55.199875Z", "completed_at": "2020-08-07T18:56:55.221960Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:55.222180Z", "completed_at": "2020-08-07T18:56:55.222187Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ ref('asana_daily_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_daily_metrics_date_day"], "unique_id": "test.asana.not_null_asana_daily_metrics_date_day", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_daily_metrics_date_day.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_daily_metrics_date_day", "resource_type": "test", "alias": "not_null_asana_daily_metrics_date_day", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_daily_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_daily_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_daily_metrics_date_day.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\nwhere date_day is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\nwhere date_day is null\n\n", "column_name": "date_day"}, "error": null, "status": null, "execution_time": 0.02459096908569336, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-08-07T18:56:55.199723Z", "completed_at": "2020-08-07T18:56:55.222823Z"}, {"name": "execute", "started_at": "2020-08-07T18:56:55.223012Z", "completed_at": "2020-08-07T18:56:55.223016Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-08-07T18:56:55.225462Z", "elapsed_time": 9.576781272888184}