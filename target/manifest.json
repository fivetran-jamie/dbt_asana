{"nodes": {"model.asana.asana_user": {"raw_sql": "with user_task_metrics as (\n\n    select * \n    from {{ ref('asana_user_task_metrics') }}\n),\n\nasana_user as (\n    select * \n    from {{ var('user') }}\n),\n\nproject_user as (\n    \n    select * \n    from {{ ref('asana_project_user') }}\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    {{ string_agg( 'project_name', \"', '\" )}} as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        count_user_projects.number_of_projects_owned,\n        count_user_projects.number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_user"], "unique_id": "model.asana.asana_user", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_user.sql", "original_file_path": "models/asana_user.sql", "name": "asana_user", "resource_type": "model", "alias": "asana_user", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_user_task_metrics"], ["stg_asana_user"], ["asana_project_user"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana.asana_user_task_metrics", "model.asana_source.stg_asana_user", "model.asana.asana_project_user"]}, "description": "Enriched user table consisting of base user info + metrics around tasks and completions", "columns": {"user_id": {"name": "user_id", "description": "System generated unique ID of the user", "meta": {}, "data_type": null, "tags": []}, "user_name": {"name": "user_name", "description": "Name of the user as it appears in the UI", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The user's email", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks assigned to this user", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of the tasks that this user has completed", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken the user to complete tasks once assigned to them.", "meta": {}, "data_type": null, "tags": []}, "number_of_projects_owned": {"name": "number_of_projects_owned", "description": "Count of the projects that this user is the owner of (excludes archived projects)", "meta": {}, "data_type": null, "tags": []}, "number_of_projects_currently_assigned_to": {"name": "number_of_projects_currently_assigned_to", "description": "Count of the projects that the user is currently assigned open tasks to.", "meta": {}, "data_type": null, "tags": []}, "projects_working_on": {"name": "projects_working_on", "description": "Aggregated list of the projects that the user is currently assigned to or owns", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_user.sql", "compiled": true, "compiled_sql": "with user_task_metrics as (\n\n    select * \n    from __dbt__CTE__asana_user_task_metrics\n),\n\nasana_user as (\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nproject_user as (\n    \n    select * \n    from __dbt__CTE__asana_project_user\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    \n    string_agg(project_name, ', ')\n\n as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        count_user_projects.number_of_projects_owned,\n        count_user_projects.number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_user_task_metrics", "sql": " __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_project_user", "sql": " __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "injected_sql": "with  __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n),  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),user_task_metrics as (\n\n    select * \n    from __dbt__CTE__asana_user_task_metrics\n),\n\nasana_user as (\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nproject_user as (\n    \n    select * \n    from __dbt__CTE__asana_project_user\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    \n    string_agg(project_name, ', ')\n\n as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        count_user_projects.number_of_projects_owned,\n        count_user_projects.number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join"}, "model.asana.asana_task": {"raw_sql": "with task as (\n    select *\n    from {{ var('task') }}\n),\n\ntask_comments as (\n\n    select * \n    from {{ ref('asana_task_comments') }}\n),\n\ntask_followers as (\n\n    select *\n    from {{ ref('asana_task_followers') }}\n),\n\ntask_open_length as (\n\n    select *\n    from {{ ref('asana_task_open_length') }}\n),\n\ntask_tags as (\n\n    select *\n    from {{ ref('asana_task_tags') }}\n),\n\ntask_assignee as (\n\n    select * \n    from  {{ ref('asana_task_assignee') }}\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from {{ ref('asana_task_projects') }}\n),\n\nsubtask_parent as (\n\n    select * \n    from {{ ref('asana_subtask_parent') }}\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from {{ ref('asana_task_first_modifier') }}\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_task"], "unique_id": "model.asana.asana_task", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_task.sql", "original_file_path": "models/asana_task.sql", "name": "asana_task", "resource_type": "model", "alias": "asana_task", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_task"], ["asana_task_comments"], ["asana_task_followers"], ["asana_task_open_length"], ["asana_task_tags"], ["asana_task_assignee"], ["asana_task_projects"], ["asana_subtask_parent"], ["asana_task_first_modifier"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_task", "model.asana.asana_task_comments", "model.asana.asana_task_followers", "model.asana.asana_task_open_length", "model.asana.asana_task_tags", "model.asana.asana_task_assignee", "model.asana.asana_task_projects", "model.asana.asana_subtask_parent", "model.asana.asana_task_first_modifier"]}, "description": "An enriched task table consisting of base task info + aggregated metrics and lists", "columns": {"task_id": {"name": "task_id", "description": "System generated unique ID of the task.", "meta": {}, "data_type": null, "tags": []}, "task_name": {"name": "task_name", "description": "User-facing name of the task", "meta": {}, "data_type": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ASANA_USER that is currently assigned the task.", "meta": {}, "data_type": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "Name of the user that the task is currently assigned to.", "meta": {}, "data_type": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email of the user that the task is currently assigned to.", "meta": {}, "data_type": null, "tags": []}, "assignee_status": {"name": "assignee_status", "description": "Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of \"My Tasks\"", "meta": {}, "data_type": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean that is true if the task is currently marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_by_user_id": {"name": "completed_by_user_id", "description": "Foreign key referencing the USER who completed the task. Note that this may be different than the assignee", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was created", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date the task is due, if provided.", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the task was last modified", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the task, if a date range is given.", "meta": {}, "data_type": null, "tags": []}, "task_description": {"name": "task_description", "description": "Free-form text describing the task, as seen in the UI.", "meta": {}, "data_type": null, "tags": []}, "task_link": {"name": "task_link", "description": "URL formatted to bring you directly to the task in asana.", "meta": {}, "data_type": null, "tags": []}, "days_open": {"name": "days_open", "description": "The number of days the task has been/was open (creation -> completion)", "meta": {}, "data_type": null, "tags": []}, "is_currently_assigned": {"name": "is_currently_assigned", "description": "Boolean, true if the task is *currently* assigned", "meta": {}, "data_type": null, "tags": []}, "has_been_assigned": {"name": "has_been_assigned", "description": "Boolean, true if the task has at one point been assigned, even if currently not.", "meta": {}, "data_type": null, "tags": []}, "days_since_last_assignment": {"name": "days_since_last_assignment", "description": "The number of days the task has been/was open and assigned to to the most recent user (last assignment -> completion)", "meta": {}, "data_type": null, "tags": []}, "days_since_first_assignment": {"name": "days_since_first_assignment", "description": "The number of days the task has been/was open and assigned at all (first time assigned -> completion)", "meta": {}, "data_type": null, "tags": []}, "last_assigned_at": {"name": "last_assigned_at", "description": "Timestamp of when the task was last assigned (to the current user if still assigned)", "meta": {}, "data_type": null, "tags": []}, "first_assigned_At": {"name": "first_assigned_At", "description": "Timestamp of when the task was first assigned to someone", "meta": {}, "data_type": null, "tags": []}, "first_modifier_user_id": {"name": "first_modifier_user_id", "description": "Foreign key referencing the ASANA_USER who made the first modification to the task (ie added a description). A proxy for task creator.", "meta": {}, "data_type": null, "tags": []}, "first_modifier_name": {"name": "first_modifier_name", "description": "Name of the user who made the first modification to the task", "meta": {}, "data_type": null, "tags": []}, "number_of_comments": {"name": "number_of_comments", "description": "Count of comments made on the task", "meta": {}, "data_type": null, "tags": []}, "conversation": {"name": "conversation", "description": "The task's comments and authors aggregated into an ordered conversation, with authors + time sent", "meta": {}, "data_type": null, "tags": []}, "followers": {"name": "followers", "description": "A list of the names of the users who follow the task.", "meta": {}, "data_type": null, "tags": []}, "number_of_followers": {"name": "number_of_followers", "description": "Count of the users following the task", "meta": {}, "data_type": null, "tags": []}, "tags": {"name": "tags", "description": "A list of the tags associated with the task.", "meta": {}, "data_type": null, "tags": []}, "number_of_tags": {"name": "number_of_tags", "description": "Count of the tags associated with the task.", "meta": {}, "data_type": null, "tags": []}, "projects_sections": {"name": "projects_sections", "description": "A list of the projects + sections that this task is listed under.", "meta": {}, "data_type": null, "tags": []}, "is_subtask": {"name": "is_subtask", "description": "Boolean that's true if the task is a subtask of another.", "meta": {}, "data_type": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Self-referential id of the parent TASK that this is a subtask of.", "meta": {}, "data_type": null, "tags": []}, "parent_task_name": {"name": "parent_task_name", "description": "User-facing name of the task's parent task.", "meta": {}, "data_type": null, "tags": []}, "parent_assignee_user_id": {"name": "parent_assignee_user_id", "description": "Foreign key referencing the ASANA_USER who is assigned the parent task", "meta": {}, "data_type": null, "tags": []}, "parent_assignee_name": {"name": "parent_assignee_name", "description": "Name of the user assigned this task's parent task", "meta": {}, "data_type": null, "tags": []}, "parent_due_date": {"name": "parent_due_date", "description": "Date on which the parent task is due, if given", "meta": {}, "data_type": null, "tags": []}, "parent_created_at": {"name": "parent_created_at", "description": "Timestamp of when the parent task was created", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_task.sql", "compiled": true, "compiled_sql": "with task as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n),\n\ntask_comments as (\n\n    select * \n    from __dbt__CTE__asana_task_comments\n),\n\ntask_followers as (\n\n    select *\n    from __dbt__CTE__asana_task_followers\n),\n\ntask_open_length as (\n\n    select *\n    from __dbt__CTE__asana_task_open_length\n),\n\ntask_tags as (\n\n    select *\n    from __dbt__CTE__asana_task_tags\n),\n\ntask_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from __dbt__CTE__asana_task_projects\n),\n\nsubtask_parent as (\n\n    select * \n    from __dbt__CTE__asana_subtask_parent\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from __dbt__CTE__asana_task_first_modifier\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_comments", "sql": " __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}, {"id": "model.asana.asana_task_followers", "sql": " __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}, {"id": "model.asana.asana_task_open_length", "sql": " __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}, {"id": "model.asana.asana_task_tags", "sql": " __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}, {"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_task_projects", "sql": " __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}, {"id": "model.asana.asana_subtask_parent", "sql": " __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}, {"id": "model.asana.asana_task_first_modifier", "sql": " __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n),  __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n),  __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n),  __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n),  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n),  __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n),  __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n),task as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n),\n\ntask_comments as (\n\n    select * \n    from __dbt__CTE__asana_task_comments\n),\n\ntask_followers as (\n\n    select *\n    from __dbt__CTE__asana_task_followers\n),\n\ntask_open_length as (\n\n    select *\n    from __dbt__CTE__asana_task_open_length\n),\n\ntask_tags as (\n\n    select *\n    from __dbt__CTE__asana_task_tags\n),\n\ntask_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from __dbt__CTE__asana_task_projects\n),\n\nsubtask_parent as (\n\n    select * \n    from __dbt__CTE__asana_subtask_parent\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from __dbt__CTE__asana_task_first_modifier\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join"}, "model.asana.asana_team": {"raw_sql": "with team as (\n\n    select * from {{ var('team') }}\n),\n\nproject as (\n\n    select * \n    from {{ ref('asana_project') }}\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        {{ string_agg('case when not project.is_archived then project.project_name else null end', \"', '\") }} as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_team"], "unique_id": "model.asana.asana_team", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_team.sql", "original_file_path": "models/asana_team.sql", "name": "asana_team", "resource_type": "model", "alias": "asana_team", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_team"], ["asana_project"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana_source.stg_asana_team", "model.asana.asana_project"]}, "description": "Enriched team table consisting of basic team info + task/completion metrics (note that teams can only act on tasks in projects)", "columns": {"team_id": {"name": "team_id", "description": "System generate unique ID for the team", "meta": {}, "data_type": null, "tags": []}, "team_name": {"name": "team_name", "description": "UI-facing name of the team.", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks for this team.", "meta": {}, "data_type": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks for the team.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks that this team has completed.", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken projects of this team to close tasks.", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_assigned_days": {"name": "avg_close_time_assigned_days", "description": "The avg number of days it has taken projects of this team to close tasks, once assigned", "meta": {}, "data_type": null, "tags": []}, "active_projects": {"name": "active_projects", "description": "Aggregated list of non archived projects associated with the team", "meta": {}, "data_type": null, "tags": []}, "number_of_active_projects": {"name": "number_of_active_projects", "description": "Count of non-archived projects", "meta": {}, "data_type": null, "tags": []}, "number_of_archived_projects": {"name": "number_of_archived_projects", "description": "Count of archived projects", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_team.sql", "compiled": true, "compiled_sql": "with team as (\n\n    select * from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        \n    string_agg(case when not project.is_archived then project.project_name else null end, ', ')\n\n as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with team as (\n\n    select * from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        \n    string_agg(case when not project.is_archived then project.project_name else null end, ', ')\n\n as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join"}, "model.asana.asana_project": {"raw_sql": "with project_task_metrics as (\n\n    select *\n    from {{ ref('asana_project_task_metrics') }}\n),\n\nproject as (\n    \n    select *\n    from {{ var('project') }}\n),\n\nproject_user as (\n    \n    select *\n    from {{ ref('asana_project_user') }}\n),\n\nasana_user as (\n    select *\n    from {{ var('user') }}\n),\n\nteam as (\n    select *\n    from {{ var('team') }}\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        {{ string_agg( 'section_name', \"', '\") }} as sections\n\n    from {{ var('section') }}\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        {{ string_agg( \"asana_user.user_name || ' as ' || project_user.role\" , \"', '\" ) }} as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        count_project_users.number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_project"], "unique_id": "model.asana.asana_project", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_project.sql", "original_file_path": "models/asana_project.sql", "name": "asana_project", "resource_type": "model", "alias": "asana_project", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_project_task_metrics"], ["stg_asana_project"], ["asana_project_user"], ["stg_asana_user"], ["stg_asana_team"], ["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana.asana_project_task_metrics", "model.asana_source.stg_asana_project", "model.asana.asana_project_user", "model.asana_source.stg_asana_user", "model.asana_source.stg_asana_team", "model.asana_source.stg_asana_section"]}, "description": "Table of projects' basic info enriched with metrics regarding tasks and completions", "columns": {"project_id": {"name": "project_id", "description": "System-generated unique ID of the project.", "meta": {}, "data_type": null, "tags": []}, "project_name": {"name": "project_name", "description": "UI-facing name of the project", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks in this project", "meta": {}, "data_type": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks in this project.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks that have been completed in this project", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken to close tasks in this project", "meta": {}, "data_type": null, "tags": []}, "avg_close_time_assigned_days": {"name": "avg_close_time_assigned_days", "description": "The avg number of days it has taken to close tasks, since their *last* assignment, in this project", "meta": {}, "data_type": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the ASANA_TEAM that the project is associated with", "meta": {}, "data_type": null, "tags": []}, "team_name": {"name": "team_name", "description": "User-facing name of the project's team", "meta": {}, "data_type": null, "tags": []}, "is_archived": {"name": "is_archived", "description": "Boolean representing if the project has been arhcived in the UI", "meta": {}, "data_type": null, "tags": []}, "project_link": {"name": "project_link", "description": "URL formatted to bring you directly to the project in asana.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the project was created", "meta": {}, "data_type": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project (free-form string)", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due on, if given", "meta": {}, "data_type": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "Timestamp of when the project was last modified (doesn't include comments or tasks)", "meta": {}, "data_type": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "tags": []}, "users_involved": {"name": "users_involved", "description": "Aggregated list of the names + roles of the users involved (working on or owning) a project", "meta": {}, "data_type": null, "tags": []}, "number_of_users_involved": {"name": "number_of_users_involved", "description": "Count of the unique users associated with the project", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that's true if public to the whole workspace, false if private.", "meta": {}, "data_type": null, "tags": []}, "sections": {"name": "sections", "description": "Aggregated list of the sections that exist in the project.", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual description associated with project", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_project.sql", "compiled": true, "compiled_sql": "with project_task_metrics as (\n\n    select *\n    from __dbt__CTE__asana_project_task_metrics\n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\nproject_user as (\n    \n    select *\n    from __dbt__CTE__asana_project_user\n),\n\nasana_user as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nteam as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        \n    string_agg(section_name, ', ')\n\n as sections\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        \n    string_agg(asana_user.user_name || ' as ' || project_user.role, ', ')\n\n as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        count_project_users.number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_project_task_metrics", "sql": " __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_project_user", "sql": " __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "injected_sql": "with  __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n),  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),project_task_metrics as (\n\n    select *\n    from __dbt__CTE__asana_project_task_metrics\n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\nproject_user as (\n    \n    select *\n    from __dbt__CTE__asana_project_user\n),\n\nasana_user as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nteam as (\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        \n    string_agg(section_name, ', ')\n\n as sections\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        \n    string_agg(asana_user.user_name || ' as ' || project_user.role, ', ')\n\n as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        count_project_users.number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join"}, "model.asana.asana_daily_metrics": {"raw_sql": "with task as (\n\n    select *\n    from {{ ref('asana_task') }}\n),\n\n\nspine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( created_at )  as min_date from {{ ref('asana_task') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n    {% else %} {% set first_date = \"'2016-01-01'\" %}\n    {% endif %}\n\n\n    {{ dbt_utils.date_spine(\n        datepart = \"day\", \n        start_date =  \"'\" ~ first_date[0:10] ~ \"'\", \n        end_date = dbt_utils.dateadd(\"week\", 1, \"current_date\") ) \n    }} \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( {{ dbt_utils.datediff('task.created_at', 'spine.date_day', 'day') }} ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= {{ dbt_utils.date_trunc('day', 'task.first_assigned_at') }} then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( {{ dbt_utils.datediff('task.first_assigned_at', 'spine.date_day', 'day') }} ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = {{ dbt_utils.date_trunc('day', 'task.created_at') }} then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = {{ dbt_utils.date_trunc('day', 'task.completed_at') }} then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= {{ dbt_utils.date_trunc('day', 'task.created_at') }}\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < {{ dbt_utils.date_trunc('day', 'task.completed_at') }}\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_daily_metrics"], "unique_id": "model.asana.asana_daily_metrics", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_daily_metrics.sql", "original_file_path": "models/asana_daily_metrics.sql", "name": "asana_daily_metrics", "resource_type": "model", "alias": "asana_daily_metrics", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_spine", "macro.dbt_utils.datediff", "macro.dbt_utils.date_trunc", "macro.dbt.run_query"], "nodes": ["model.asana.asana_task"]}, "description": "Table of task metrics per each day", "columns": {"date_day": {"name": "date_day", "description": "Unique day for which metrics are calculated.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_open": {"name": "number_of_tasks_open", "description": "The number of tasks open at that point in time", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_open_assigned": {"name": "number_of_tasks_open_assigned", "description": "The number of tasks that are open on that day and have been assigned", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_created": {"name": "number_of_tasks_created", "description": "The number of tasks created on that day", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "The number of tasks completed on that day", "meta": {}, "data_type": null, "tags": []}, "avg_days_open": {"name": "avg_days_open", "description": "The average time that all tasks open on this day have spent open.", "meta": {}, "data_type": null, "tags": []}, "avg_days_open_assigned": {"name": "avg_days_open_assigned", "description": "The average time that all tasks open on this day have spent open and assigned.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_daily_metrics.sql", "compiled": true, "compiled_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n),\n\n\nspine as (\n\n    \n    \n    \n    \n    \n\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2857\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n        datetime_add(\n            cast( '2012-10-18' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n  \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n\n)\n\nselect * from filtered\n\n \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.first_assigned_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.first_assigned_at as datetime),\n        day\n    )\n\n\n ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n),\n\n\nspine as (\n\n    \n    \n    \n    \n    \n\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2857\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n        datetime_add(\n            cast( '2012-10-18' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n  \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n\n)\n\nselect * from filtered\n\n \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.first_assigned_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( \n  \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.first_assigned_at as datetime),\n        day\n    )\n\n\n ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= \n    timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n\n\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < \n    timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n\n\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc"}, "model.asana.asana_tag": {"raw_sql": "with asana_tag as (\n\n    select * \n    from {{ var('tag') }}\n),\n\ntask_tag as (\n\n    select * \n    from {{ var('task_tag') }}\n),\n\ntask as (\n\n    select *\n    from {{ ref('asana_task') }}\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "asana_tag"], "unique_id": "model.asana.asana_tag", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "asana_tag.sql", "original_file_path": "models/asana_tag.sql", "name": "asana_tag", "resource_type": "model", "alias": "asana_tag", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_tag"], ["stg_asana_task_tag"], ["asana_task"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_tag", "model.asana_source.stg_asana_task_tag", "model.asana.asana_task"]}, "description": "Table of tag basic info enriched with some task metrics.", "columns": {"tag_id": {"name": "tag_id", "description": "System-gemerated unique ID for the tag", "meta": {}, "data_type": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "UI-facing name of the tag", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks with this tag.", "meta": {}, "data_type": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks with this tag.", "meta": {}, "data_type": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks with this tag that have been completed.", "meta": {}, "data_type": null, "tags": []}, "avg_days_open": {"name": "avg_days_open", "description": "The avg number of days that completed tasks with this tag were open.", "meta": {}, "data_type": null, "tags": []}, "avg_days_assigned": {"name": "avg_days_assigned", "description": "The avg number of days that completed tasks with this tag were open and assigned.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/asana.yml", "build_path": "target/compiled/asana/models/asana_tag.sql", "compiled": true, "compiled_sql": "with asana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n),\n\ntask_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n),\n\ntask as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with asana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n),\n\ntask_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n),\n\ntask as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag"}, "model.asana.asana_subtask_parent": {"raw_sql": "with task_assignee as (\n\n    select * \n    from  {{ ref('asana_task_assignee') }}\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_subtask_parent"], "unique_id": "model.asana.asana_subtask_parent", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_subtask_parent.sql", "original_file_path": "models/intermediate/asana_subtask_parent.sql", "name": "asana_subtask_parent", "resource_type": "model", "alias": "asana_subtask_parent", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task_assignee"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana.asana_task_assignee"]}, "description": "Combines subtasks + information regarding parent tasks", "columns": {"subtask_id": {"name": "subtask_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_subtask_parent.sql", "compiled": true, "compiled_sql": "with task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent"}, "model.asana.asana_task_assignee": {"raw_sql": "with task as (\n\n    select * \n    from {{ var('task') }}\n\n),\n\nasana_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_assignee"], "unique_id": "model.asana.asana_task_assignee", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_assignee.sql", "original_file_path": "models/intermediate/asana_task_assignee.sql", "name": "asana_task_assignee", "resource_type": "model", "alias": "asana_task_assignee", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_task"], ["stg_asana_user"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_task", "model.asana_source.stg_asana_user"]}, "description": "Combines tasks + information regarding their assigned user", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_assignee.sql", "compiled": true, "compiled_sql": "with task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee"}, "model.asana.asana_task_first_modifier": {"raw_sql": "with story as (\n\n    select *\n    from {{ ref('asana_task_story') }}\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_first_modifier"], "unique_id": "model.asana.asana_task_first_modifier", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_first_modifier.sql", "original_file_path": "models/intermediate/asana_task_first_modifier.sql", "name": "asana_task_first_modifier", "resource_type": "model", "alias": "asana_task_first_modifier", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task_story"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana.asana_task_story"]}, "description": "Extracts the first person to make a story (modify) the task. A proxy for the task creator, since that's not provided.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_first_modifier.sql", "compiled": true, "compiled_sql": "with story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier"}, "model.asana.asana_project_task_metrics": {"raw_sql": "with task as (\n\n    select *\n    from {{ ref('asana_task') }}\n\n),\n\nproject as (\n\n    select * \n    from {{ var('project') }}\n\n),\n\nproject_task as (\n\n    select * \n    from {{ var('project_task') }}\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_project_task_metrics"], "unique_id": "model.asana.asana_project_task_metrics", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_project_task_metrics.sql", "original_file_path": "models/intermediate/asana_project_task_metrics.sql", "name": "asana_project_task_metrics", "resource_type": "model", "alias": "asana_project_task_metrics", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task"], ["stg_asana_project"], ["stg_asana_project_task"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana.asana_task", "model.asana_source.stg_asana_project", "model.asana_source.stg_asana_project_task"]}, "description": "Draws from (non-intermediate) ASANA_TASK to compute metrics about tasks in each project.", "columns": {"project_id": {"name": "project_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_project_task_metrics.sql", "compiled": true, "compiled_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final"}, "model.asana.asana_user_task_metrics": {"raw_sql": "with tasks as (\n\n    select * \n    from {{ ref('asana_task') }}\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_user_task_metrics"], "unique_id": "model.asana.asana_user_task_metrics", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_user_task_metrics.sql", "original_file_path": "models/intermediate/asana_user_task_metrics.sql", "name": "asana_user_task_metrics", "resource_type": "model", "alias": "asana_user_task_metrics", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana.asana_task"]}, "description": "Draws from (non-intermediate) ASANA_TASK to compute metrics about tasks for each user.", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_user_task_metrics.sql", "compiled": true, "compiled_sql": "with tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final"}, "model.asana.asana_task_comments": {"raw_sql": "with comments as (\n    \n    select *\n    from {{ ref('asana_task_story') }}\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        {{ string_agg( \"created_at || '  -  ' || created_by_name || ':  ' || comment_content\", \"'\\\\n'\" ) }} as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_comments"], "unique_id": "model.asana.asana_task_comments", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_comments.sql", "original_file_path": "models/intermediate/asana_task_comments.sql", "name": "asana_task_comments", "resource_type": "model", "alias": "asana_task_comments", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["asana_task_story"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana.asana_task_story"]}, "description": "Aggregates all comments on a task into a conversation + the number of comments", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_comments.sql", "compiled": true, "compiled_sql": "with comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation"}, "model.asana.asana_project_user": {"raw_sql": "with project_tasks as (\n    \n    select *\n    from {{ var('project_task') }}\n),\n\nassigned_tasks as (\n    \n    select * \n    from {{ ref('asana_task_assignee') }}\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from {{ var('project') }}\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_project_user"], "unique_id": "model.asana.asana_project_user", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_project_user.sql", "original_file_path": "models/intermediate/asana_project_user.sql", "name": "asana_project_user", "resource_type": "model", "alias": "asana_project_user", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_project_task"], ["asana_task_assignee"], ["stg_asana_project"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_project_task", "model.asana.asana_task_assignee", "model.asana_source.stg_asana_project"]}, "description": "Table of who is *working* on the project -- its owner + users assigned to it tasks", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_project_user.sql", "compiled": true, "compiled_sql": "with project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user"}, "model.asana.asana_task_tags": {"raw_sql": "with task_tag as (\n    \n    select *\n    from {{ var('task_tag') }}\n\n),\n\nasana_tag as (\n\n    select * \n    from {{ var('tag') }}\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        {{ string_agg( 'asana_tag.tag_name', \"', '\" )}} as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_tags"], "unique_id": "model.asana.asana_task_tags", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_tags.sql", "original_file_path": "models/intermediate/asana_task_tags.sql", "name": "asana_task_tags", "resource_type": "model", "alias": "asana_task_tags", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_task_tag"], ["stg_asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana_source.stg_asana_task_tag", "model.asana_source.stg_asana_tag"]}, "description": "Aggregates a count of and a list of the names of the tags attached to each task.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_tags.sql", "compiled": true, "compiled_sql": "with task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags"}, "model.asana.asana_task_followers": {"raw_sql": "with task_follower as (\n    \n    select *\n    from {{ var('task_follower') }}\n\n),\n\nasana_user as (\n\n    select * \n    from {{ var('user') }}\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        {{ string_agg( 'asana_user.user_name', \"', '\" )}} as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_followers"], "unique_id": "model.asana.asana_task_followers", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_followers.sql", "original_file_path": "models/intermediate/asana_task_followers.sql", "name": "asana_task_followers", "resource_type": "model", "alias": "asana_task_followers", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_task_follower"], ["stg_asana_user"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana_source.stg_asana_task_follower", "model.asana_source.stg_asana_user"]}, "description": "Aggregates a count of and a list of the names of the users who follow each task", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_followers.sql", "compiled": true, "compiled_sql": "with task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers"}, "model.asana.asana_task_open_length": {"raw_sql": "with task as (\n    \n    select *\n    from {{ var('task') }}\n\n),\n\nstory as (\n\n    select * \n    from {{ ref('asana_task_story') }}\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    {% set open_until = 'task.completed_at' if 'task.is_completed' is true else dbt_utils.current_timestamp() %}\n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        {{ dbt_utils.datediff('task.created_at', open_until, 'day') }} as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        {{ dbt_utils.datediff('assignments.last_assigned_at', open_until, 'day') }} as days_since_last_assignment,\n\n        {{ dbt_utils.datediff('assignments.first_assigned_at', open_until, 'day') }} as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_open_length"], "unique_id": "model.asana.asana_task_open_length", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_open_length.sql", "original_file_path": "models/intermediate/asana_task_open_length.sql", "name": "asana_task_open_length", "resource_type": "model", "alias": "asana_task_open_length", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_task"], ["asana_task_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"], "nodes": ["model.asana_source.stg_asana_task", "model.asana.asana_task_story"]}, "description": "Computes the days that each task has spent open and assigned.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_open_length.sql", "compiled": true, "compiled_sql": "with task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "with  __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length"}, "model.asana.asana_task_story": {"raw_sql": "with story as (\n    \n    select * \n    from {{ var('story') }}\n\n),\n\nasana_user as (\n\n    select * \n    from {{ var('user') }}\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n{% set actions = {\n    'added the name%': 'added name',\n    'changed the name%': 'changed name',\n    'removed the name': 'removed name',\n    'added the description%': 'added description',\n    'changed the description%': 'changed description',\n    'removed the description': 'removed description',\n    'added to%': 'added to project',\n    'removed from%': 'removed from project',\n    'assigned%': 'assigned',\n    'unassigned%': 'unassigned',\n    'changed the due date%': 'changed due date', \n    'changed the start date%due date%': 'changed due date',\n    'changed the start date%': 'changed start date',\n    'removed the due date%': 'removed due date',\n    'removed the date range%': 'removed due date',\n    'removed the start date': 'removed start date',\n    'added subtask%': 'added subtask',\n    'added%collaborator%': 'added collaborator',\n    'moved%': 'moved to section',\n    'duplicated task from%': 'duplicated this from other task',\n    'marked%as a duplicate of this': 'marked other task as duplicate of this',\n    'marked this a duplicate of%': 'marked as duplicate',\n    'marked this task complete': 'completed',\n    'completed this task': 'completed',\n    'marked incomplete': 'marked incomplete',\n    'marked this task as a milestone': 'marked as milestone',\n    'unmarked this task as a milestone': 'unmarked as milestone',\n    'marked this milestone complete': 'completed milestone',\n    'completed this milestone': 'completed milestone',\n    'attached%': 'attachment',\n    'liked your comment': 'liked comment',\n    'liked this task': 'liked task',\n    'liked your attachment': 'liked attachment',\n    'liked that you completed this task': 'liked completion',\n    'completed the last task you were waiting on%': 'completed dependency',\n    'added feedback to%': 'added feedback',\n    'changed%to%': 'changed tag',\n    'cleared%': 'cleared tag',\n    'comment': 'comment',\n    \"have a task due on%\": null \n\n} %}\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        {%- for key, value in actions.items() %} \n        when action_description like '{{key}}' then '{{value}}' \n        {%- endfor %}\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_story"], "unique_id": "model.asana.asana_task_story", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_story.sql", "original_file_path": "models/intermediate/asana_task_story.sql", "name": "asana_task_story", "resource_type": "model", "alias": "asana_task_story", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_story"], ["stg_asana_user"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana_story", "model.asana_source.stg_asana_user"]}, "description": "Parses and categorizes asana stories into action types. Useful for looking at individual-task histories", "columns": {"story_id": {"name": "story_id", "description": "", "meta": {}, "data_type": null, "tags": []}, "action_taken": {"name": "action_taken", "description": "The bucket that the story event falls into.", "meta": {}, "data_type": null, "tags": []}, "comment_content": {"name": "comment_content", "description": "If the action taken is a comment, this is the comment's text. Otherwise null.", "meta": {}, "data_type": null, "tags": []}, "action_description": {"name": "action_description", "description": "The original pre-categorized content of the story", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_story.sql", "compiled": true, "compiled_sql": "with story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final"}, "model.asana.asana_task_projects": {"raw_sql": "with task_project as (\n\n    select * \n    from {{ var('project_task') }}\n\n),\n\nproject as (\n    \n    select * \n    from {{ var ('project') }}\n),\n\ntask_section as (\n\n    select * \n    from {{ var('task_section') }}\n\n),\n\nsection as (\n    \n    select * \n    from {{ var ('section') }}\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        {{ string_agg( 'task_project_section.project_section', \"', '\" )}} as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "intermediate", "asana_task_projects"], "unique_id": "model.asana.asana_task_projects", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "intermediate/asana_task_projects.sql", "original_file_path": "models/intermediate/asana_task_projects.sql", "name": "asana_task_projects", "resource_type": "model", "alias": "asana_task_projects", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_asana_project_task"], ["stg_asana_project"], ["stg_asana_task_section"], ["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.asana.string_agg"], "nodes": ["model.asana_source.stg_asana_project_task", "model.asana_source.stg_asana_project", "model.asana_source.stg_asana_task_section", "model.asana_source.stg_asana_section"]}, "description": "Aggregates a count of and a list of the namesof the projects and sections that each task belongs to.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate_asana.yml", "build_path": "target/compiled/asana/models/intermediate/asana_task_projects.sql", "compiled": true, "compiled_sql": "with task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections"}, "test.asana.unique_asana_task_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_task_id"], "unique_id": "test.asana.unique_asana_task_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_task_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_task_task_id", "resource_type": "test", "alias": "unique_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_task_id"], "unique_id": "test.asana.not_null_asana_task_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_task_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_task_task_id", "resource_type": "test", "alias": "not_null_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_task`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_task`\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_user_user_id"], "unique_id": "test.asana.unique_asana_user_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_user_user_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_user_user_id", "resource_type": "test", "alias": "unique_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id"}, "test.asana.not_null_asana_user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_user_user_id"], "unique_id": "test.asana.not_null_asana_user_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_user_user_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_user_user_id", "resource_type": "test", "alias": "not_null_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_user`\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_user`\nwhere user_id is null\n\n", "column_name": "user_id"}, "test.asana.unique_asana_project_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_project_project_id"], "unique_id": "test.asana.unique_asana_project_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_project_project_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_project_project_id", "resource_type": "test", "alias": "unique_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "project_id"}, "test.asana.not_null_asana_project_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_project_project_id"], "unique_id": "test.asana.not_null_asana_project_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_project_project_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_project_project_id", "resource_type": "test", "alias": "not_null_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_project`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_project`\nwhere project_id is null\n\n", "column_name": "project_id"}, "test.asana.unique_asana_team_team_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ ref('asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_team_team_id"], "unique_id": "test.asana.unique_asana_team_team_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_team_team_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_team_team_id", "resource_type": "test", "alias": "unique_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "team_id"}, "test.asana.not_null_asana_team_team_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ ref('asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_team_team_id"], "unique_id": "test.asana.not_null_asana_team_team_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_team_team_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_team_team_id", "resource_type": "test", "alias": "not_null_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_team`\nwhere team_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_team`\nwhere team_id is null\n\n", "column_name": "team_id"}, "test.asana.unique_asana_tag_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ ref('asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_tag_tag_id"], "unique_id": "test.asana.unique_asana_tag_tag_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_tag_tag_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_tag_tag_id", "resource_type": "test", "alias": "unique_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "tag_id"}, "test.asana.not_null_asana_tag_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ ref('asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_tag_tag_id"], "unique_id": "test.asana.not_null_asana_tag_tag_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_tag_tag_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_tag_tag_id", "resource_type": "test", "alias": "not_null_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_tag`\nwhere tag_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_tag`\nwhere tag_id is null\n\n", "column_name": "tag_id"}, "test.asana.unique_asana_daily_metrics_date_day": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "date_day", "model": "{{ ref('asana_daily_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_daily_metrics_date_day"], "unique_id": "test.asana.unique_asana_daily_metrics_date_day", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_daily_metrics_date_day.sql", "original_file_path": "models/asana.yml", "name": "unique_asana_daily_metrics_date_day", "resource_type": "test", "alias": "unique_asana_daily_metrics_date_day", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_daily_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_daily_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/unique_asana_daily_metrics_date_day.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        date_day\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\n    where date_day is not null\n    group by date_day\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        date_day\n\n    from `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\n    where date_day is not null\n    group by date_day\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "date_day"}, "test.asana.not_null_asana_daily_metrics_date_day": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ ref('asana_daily_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_daily_metrics_date_day"], "unique_id": "test.asana.not_null_asana_daily_metrics_date_day", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_daily_metrics_date_day.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana_daily_metrics_date_day", "resource_type": "test", "alias": "not_null_asana_daily_metrics_date_day", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_daily_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_daily_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/asana.yml/schema_test/not_null_asana_daily_metrics_date_day.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\nwhere date_day is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`asana_daily_metrics`\nwhere date_day is null\n\n", "column_name": "date_day"}, "test.asana.unique_asana_project_task_metrics_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_project_task_metrics_project_id"], "unique_id": "test.asana.unique_asana_project_task_metrics_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_project_task_metrics_project_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_project_task_metrics_project_id", "resource_type": "test", "alias": "unique_asana_project_task_metrics_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_project_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_project_task_metrics_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from __dbt__CTE__asana_project_task_metrics\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_project_task_metrics", "sql": " __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from __dbt__CTE__asana_project_task_metrics\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "project_id"}, "test.asana.not_null_asana_project_task_metrics_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('asana_project_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_project_task_metrics_project_id"], "unique_id": "test.asana.not_null_asana_project_task_metrics_project_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_project_task_metrics_project_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_project_task_metrics_project_id", "resource_type": "test", "alias": "not_null_asana_project_task_metrics_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_project_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_project_task_metrics_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_project_task_metrics\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_project_task_metrics", "sql": " __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_project_task_metrics\nwhere project_id is null\n\n", "column_name": "project_id"}, "test.asana.unique_asana_project_user_project_id_user_id_role_currently_working_on": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id || '-' || user_id || '-' || role || '-' || currently_working_on", "model": "{{ ref('asana_project_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_project_user_project_id_user_id_role_currently_working_on"], "unique_id": "test.asana.unique_asana_project_user_project_id_user_id_role_currently_working_on", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_project_user_87c5a20e1cf302266ce130e0c24d01d4.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_project_user_project_id_user_id_role_currently_working_on", "resource_type": "test", "alias": "unique_asana_project_user_project_id_user_id_role_currently_working_on", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_project_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_project_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_project_user_87c5a20e1cf302266ce130e0c24d01d4.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n\n    from __dbt__CTE__asana_project_user\n    where project_id || '-' || user_id || '-' || role || '-' || currently_working_on is not null\n    group by project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_project_user", "sql": " __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__CTE__asana_task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)select count(*) as validation_errors\nfrom (\n\n    select\n        project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n\n    from __dbt__CTE__asana_project_user\n    where project_id || '-' || user_id || '-' || role || '-' || currently_working_on is not null\n    group by project_id || '-' || user_id || '-' || role || '-' || currently_working_on\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": null}, "test.asana.unique_asana_subtask_parent_subtask_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "subtask_id", "model": "{{ ref('asana_subtask_parent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_subtask_parent_subtask_id"], "unique_id": "test.asana.unique_asana_subtask_parent_subtask_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_subtask_parent_subtask_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_subtask_parent_subtask_id", "resource_type": "test", "alias": "unique_asana_subtask_parent_subtask_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_subtask_parent"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_subtask_parent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_subtask_parent_subtask_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        subtask_id\n\n    from __dbt__CTE__asana_subtask_parent\n    where subtask_id is not null\n    group by subtask_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_subtask_parent", "sql": " __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)select count(*) as validation_errors\nfrom (\n\n    select\n        subtask_id\n\n    from __dbt__CTE__asana_subtask_parent\n    where subtask_id is not null\n    group by subtask_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "subtask_id"}, "test.asana.not_null_asana_subtask_parent_subtask_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "subtask_id", "model": "{{ ref('asana_subtask_parent') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_subtask_parent_subtask_id"], "unique_id": "test.asana.not_null_asana_subtask_parent_subtask_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_subtask_parent_subtask_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_subtask_parent_subtask_id", "resource_type": "test", "alias": "not_null_asana_subtask_parent_subtask_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_subtask_parent"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_subtask_parent"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_subtask_parent_subtask_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_subtask_parent\nwhere subtask_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.asana_subtask_parent", "sql": " __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__CTE__asana_subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__CTE__asana_task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_subtask_parent\nwhere subtask_id is null\n\n", "column_name": "subtask_id"}, "test.asana.unique_asana_task_assignee_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_assignee') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_assignee_task_id"], "unique_id": "test.asana.unique_asana_task_assignee_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_assignee_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_assignee_task_id", "resource_type": "test", "alias": "unique_asana_task_assignee_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_assignee"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_assignee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_assignee_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_assignee\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_assignee\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_assignee_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_assignee') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_assignee_task_id"], "unique_id": "test.asana.not_null_asana_task_assignee_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_assignee_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_assignee_task_id", "resource_type": "test", "alias": "not_null_asana_task_assignee_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_assignee"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_assignee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_assignee_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_assignee\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_assignee", "sql": " __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_assignee\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_task_comments_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_comments') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_comments_task_id"], "unique_id": "test.asana.unique_asana_task_comments_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_comments_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_comments_task_id", "resource_type": "test", "alias": "unique_asana_task_comments_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_comments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_comments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_comments_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_comments\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_comments", "sql": " __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_comments\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_comments_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_comments') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_comments_task_id"], "unique_id": "test.asana.not_null_asana_task_comments_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_comments_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_comments_task_id", "resource_type": "test", "alias": "not_null_asana_task_comments_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_comments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_comments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_comments_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_comments\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_comments", "sql": " __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__CTE__asana_task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_comments\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_task_first_modifier_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_first_modifier') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_first_modifier_task_id"], "unique_id": "test.asana.unique_asana_task_first_modifier_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_first_modifier_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_first_modifier_task_id", "resource_type": "test", "alias": "unique_asana_task_first_modifier_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_first_modifier"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_first_modifier"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_first_modifier_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_first_modifier\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_first_modifier", "sql": " __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_first_modifier\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_first_modifier_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_first_modifier') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_first_modifier_task_id"], "unique_id": "test.asana.not_null_asana_task_first_modifier_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_first_modifier_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_first_modifier_task_id", "resource_type": "test", "alias": "not_null_asana_task_first_modifier_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_first_modifier"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_first_modifier"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_first_modifier_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_first_modifier\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_first_modifier", "sql": " __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__CTE__asana_task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_first_modifier\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_task_followers_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_followers') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_followers_task_id"], "unique_id": "test.asana.unique_asana_task_followers_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_followers_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_followers_task_id", "resource_type": "test", "alias": "unique_asana_task_followers_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_followers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_followers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_followers_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_followers\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_followers", "sql": " __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_followers\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_followers_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_followers') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_followers_task_id"], "unique_id": "test.asana.not_null_asana_task_followers_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_followers_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_followers_task_id", "resource_type": "test", "alias": "not_null_asana_task_followers_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_followers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_followers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_followers_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_followers\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_followers", "sql": " __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_followers\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_task_open_length_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_open_length') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_open_length_task_id"], "unique_id": "test.asana.unique_asana_task_open_length_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_open_length_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_open_length_task_id", "resource_type": "test", "alias": "unique_asana_task_open_length_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_open_length"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_open_length"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_open_length_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_open_length\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_open_length", "sql": " __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_open_length\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_open_length_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_open_length') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_open_length_task_id"], "unique_id": "test.asana.not_null_asana_task_open_length_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_open_length_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_open_length_task_id", "resource_type": "test", "alias": "not_null_asana_task_open_length_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_open_length"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_open_length"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_open_length_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_open_length\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.asana_task_open_length", "sql": " __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__CTE__asana_task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__CTE__asana_task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n\n as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_last_assignment,\n\n        \n  \n\n    datetime_diff(\n        cast(\n    current_timestamp\n as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n\n as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_open_length\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_task_projects_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_projects') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_projects_task_id"], "unique_id": "test.asana.unique_asana_task_projects_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_projects_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_projects_task_id", "resource_type": "test", "alias": "unique_asana_task_projects_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_projects"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_projects"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_projects_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_projects\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_projects", "sql": " __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_projects\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_projects_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_projects') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_projects_task_id"], "unique_id": "test.asana.not_null_asana_task_projects_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_projects_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_projects_task_id", "resource_type": "test", "alias": "not_null_asana_task_projects_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_projects"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_projects"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_projects_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_projects\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_projects", "sql": " __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_projects\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_task_story_story_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "story_id", "model": "{{ ref('asana_task_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_story_story_id"], "unique_id": "test.asana.unique_asana_task_story_story_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_story_story_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_story_story_id", "resource_type": "test", "alias": "unique_asana_task_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from __dbt__CTE__asana_task_story\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)select count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from __dbt__CTE__asana_task_story\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "story_id"}, "test.asana.not_null_asana_task_story_story_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "story_id", "model": "{{ ref('asana_task_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_story_story_id"], "unique_id": "test.asana.not_null_asana_task_story_story_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_story_story_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_story_story_id", "resource_type": "test", "alias": "not_null_asana_task_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_story\nwhere story_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_story", "sql": " __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_story\nwhere story_id is null\n\n", "column_name": "story_id"}, "test.asana.unique_asana_task_tags_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_tags') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_task_tags_task_id"], "unique_id": "test.asana.unique_asana_task_tags_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_task_tags_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_task_tags_task_id", "resource_type": "test", "alias": "unique_asana_task_tags_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_tags"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_task_tags"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_task_tags_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_tags\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_tags", "sql": " __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)select count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from __dbt__CTE__asana_task_tags\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana.not_null_asana_task_tags_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('asana_task_tags') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_task_tags_task_id"], "unique_id": "test.asana.not_null_asana_task_tags_task_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_task_tags_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_task_tags_task_id", "resource_type": "test", "alias": "not_null_asana_task_tags_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_task_tags"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_task_tags"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_task_tags_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_task_tags\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_task_tags", "sql": " __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_task_tags\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana.unique_asana_user_task_metrics_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "unique_asana_user_task_metrics_user_id"], "unique_id": "test.asana.unique_asana_user_task_metrics_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/unique_asana_user_task_metrics_user_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_asana_user_task_metrics_user_id", "resource_type": "test", "alias": "unique_asana_user_task_metrics_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana.asana_user_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/unique_asana_user_task_metrics_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__asana_user_task_metrics\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_user_task_metrics", "sql": " __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__asana_user_task_metrics\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id"}, "test.asana.not_null_asana_user_task_metrics_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('asana_user_task_metrics') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana", "schema_test", "not_null_asana_user_task_metrics_user_id"], "unique_id": "test.asana.not_null_asana_user_task_metrics_user_id", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "schema_test/not_null_asana_user_task_metrics_user_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_asana_user_task_metrics_user_id", "resource_type": "test", "alias": "not_null_asana_user_task_metrics_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["asana_user_task_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana.asana_user_task_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/schema_test/not_null_asana_user_task_metrics_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom __dbt__CTE__asana_user_task_metrics\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.asana_user_task_metrics", "sql": " __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__asana_user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`dbt_jamie`.`asana_task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)select count(*) as validation_errors\nfrom __dbt__CTE__asana_user_task_metrics\nwhere user_id is null\n\n", "column_name": "user_id"}, "model.asana_source.stg_asana_team": {"raw_sql": "with team as (\n\n    select *\n    from {{ var('team') }}\n\n), fields as (\n\n    select\n        id as team_id,\n        name as team_name\n\n    from team\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_team"], "unique_id": "model.asana_source.stg_asana_team", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_team.sql", "original_file_path": "models/stg_asana_team.sql", "name": "stg_asana_team", "resource_type": "model", "alias": "stg_asana_team", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "team"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.team"]}, "description": "Table of the teams within the organization", "columns": {"team_id": {"name": "team_id", "description": "System genereated unique ID for each team", "meta": {}, "data_type": null, "tags": []}, "team_name": {"name": "team_name", "description": "User-facing name of the team", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_team.sql", "compiled": true, "compiled_sql": "with team as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`team`\n\n), fields as (\n\n    select\n        id as team_id,\n        name as team_name\n\n    from team\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with team as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`team`\n\n), fields as (\n\n    select\n        id as team_id,\n        name as team_name\n\n    from team\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_project_task": {"raw_sql": "with project_task as (\n\n    select *\n    from {{ var('project_task') }}\n\n), fields as (\n\n    select\n        project_id,\n        task_id\n\n    from project_task\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_project_task"], "unique_id": "model.asana_source.stg_asana_project_task", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_project_task.sql", "original_file_path": "models/stg_asana_project_task.sql", "name": "stg_asana_project_task", "resource_type": "model", "alias": "stg_asana_project_task", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "project_task"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.project_task"]}, "description": "Table of tasks and the project(s) they each belong to. If a project doesn't have a task, it won't be in here (and vice versa)", "columns": {"project_id": {"name": "project_id", "description": "Foreign key referencing the ID of the PROJECT", "meta": {}, "data_type": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_project_task.sql", "compiled": true, "compiled_sql": "with project_task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project_task`\n\n), fields as (\n\n    select\n        project_id,\n        task_id\n\n    from project_task\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with project_task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project_task`\n\n), fields as (\n\n    select\n        project_id,\n        task_id\n\n    from project_task\n\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_project": {"raw_sql": "with project as (\n\n    select *\n    from {{ var('project') }}\n\n), fields as (\n\n    select\n      id as project_id,\n      archived as is_archived,\n      created_at,\n      current_status, \n      due_date,\n      modified_at,\n      name as project_name,\n      owner_id as owner_user_id,\n      public as is_public,\n      team_id,\n      workspace_id,\n      notes\n\n    from project\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_project"], "unique_id": "model.asana_source.stg_asana_project", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_project.sql", "original_file_path": "models/stg_asana_project.sql", "name": "stg_asana_project", "resource_type": "model", "alias": "stg_asana_project", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.project"]}, "description": "Table containing all projects", "columns": {"project_id": {"name": "project_id", "description": "System-generated unique ID of the project", "meta": {}, "data_type": null, "tags": []}, "is_archived": {"name": "is_archived", "description": "Boolean representing if the project has been arhcived in the UI", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the project was created", "meta": {}, "data_type": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project (free-form string)", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due on, if given", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the project was last modified (doesn't include comments or tasks)", "meta": {}, "data_type": null, "tags": []}, "project_name": {"name": "project_name", "description": "The user-facing name of the project", "meta": {}, "data_type": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that is true if the project is public to all users in the organization", "meta": {}, "data_type": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the TEAM that the project is shared with.", "meta": {}, "data_type": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The ID of the organization's entire Asana workspace. Not relevant unless you're looking at multiple orgs", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual notes associated with the project.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_project.sql", "compiled": true, "compiled_sql": "with project as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project`\n\n), fields as (\n\n    select\n      id as project_id,\n      archived as is_archived,\n      created_at,\n      current_status, \n      due_date,\n      modified_at,\n      name as project_name,\n      owner_id as owner_user_id,\n      public as is_public,\n      team_id,\n      workspace_id,\n      notes\n\n    from project\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with project as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`project`\n\n), fields as (\n\n    select\n      id as project_id,\n      archived as is_archived,\n      created_at,\n      current_status, \n      due_date,\n      modified_at,\n      name as project_name,\n      owner_id as owner_user_id,\n      public as is_public,\n      team_id,\n      workspace_id,\n      notes\n\n    from project\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_task": {"raw_sql": "with task as (\n\n    select *\n    from {{ var('task') }}\n\n), fields as (\n\n    select\n      id as task_id,\n      assignee_id as assignee_user_id,\n      assignee_status,\n      completed as is_completed,\n      completed_at,\n      completed_by_id as completed_by_user_id,\n      created_at,\n      coalesce(due_on, due_at) as due_date,\n      modified_at,\n      name as task_name,\n      parent_id as parent_task_id,\n      start_on as start_date,\n      notes as task_description,\n      workspace_id\n\n    from task\n    \n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task"], "unique_id": "model.asana_source.stg_asana_task", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task.sql", "original_file_path": "models/stg_asana_task.sql", "name": "stg_asana_task", "resource_type": "model", "alias": "stg_asana_task", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task"]}, "description": "Table containing all created tasks", "columns": {"task_id": {"name": "task_id", "description": "System generated unique ID of the task", "meta": {}, "data_type": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the USER that is currently assigned the task.", "meta": {}, "data_type": null, "tags": []}, "assignee_status": {"name": "assignee_status", "description": "Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of \"My Tasks\"", "meta": {}, "data_type": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean that is true if the task is currently marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was marked complete.", "meta": {}, "data_type": null, "tags": []}, "completed_by_user_id": {"name": "completed_by_user_id", "description": "Foreign key referencing the USER who completed the task.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was created", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date the task is due, if provided.", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the task was last modified", "meta": {}, "data_type": null, "tags": []}, "task_name": {"name": "task_name", "description": "User-facing name of the task.", "meta": {}, "data_type": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Self-referential id of the parent TASK that this is a subtask of.", "meta": {}, "data_type": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the task, if a date range is given.", "meta": {}, "data_type": null, "tags": []}, "task_description": {"name": "task_description", "description": "Free-form text describing the task, as seen in the UI.", "meta": {}, "data_type": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "ID of the organization's Asana workspace. Irrelevant unless working with multiple companies.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task.sql", "compiled": true, "compiled_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task`\n\n), fields as (\n\n    select\n      id as task_id,\n      assignee_id as assignee_user_id,\n      assignee_status,\n      completed as is_completed,\n      completed_at,\n      completed_by_id as completed_by_user_id,\n      created_at,\n      coalesce(due_on, due_at) as due_date,\n      modified_at,\n      name as task_name,\n      parent_id as parent_task_id,\n      start_on as start_date,\n      notes as task_description,\n      workspace_id\n\n    from task\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task`\n\n), fields as (\n\n    select\n      id as task_id,\n      assignee_id as assignee_user_id,\n      assignee_status,\n      completed as is_completed,\n      completed_at,\n      completed_by_id as completed_by_user_id,\n      created_at,\n      coalesce(due_on, due_at) as due_date,\n      modified_at,\n      name as task_name,\n      parent_id as parent_task_id,\n      start_on as start_date,\n      notes as task_description,\n      workspace_id\n\n    from task\n    \n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_user": {"raw_sql": "with asana_user as (\n\n    select *\n    from {{ var('user') }}\n\n), fields as (\n\n    select\n      id as user_id,\n      email,\n      name as user_name\n    from asana_user\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_user"], "unique_id": "model.asana_source.stg_asana_user", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_user.sql", "original_file_path": "models/stg_asana_user.sql", "name": "stg_asana_user", "resource_type": "model", "alias": "stg_asana_user", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "user"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.user"]}, "description": "Table of all accounts in the organization", "columns": {"user_id": {"name": "user_id", "description": "System generated unique ID for each user", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The user's email", "meta": {}, "data_type": null, "tags": []}, "user_name": {"name": "user_name", "description": "The name of the user as it appears in the UI", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_user.sql", "compiled": true, "compiled_sql": "with asana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`user`\n\n), fields as (\n\n    select\n      id as user_id,\n      email,\n      name as user_name\n    from asana_user\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with asana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`user`\n\n), fields as (\n\n    select\n      id as user_id,\n      email,\n      name as user_name\n    from asana_user\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_task_tag": {"raw_sql": "with task_tag as (\n\n    select *\n    from {{ var('task_tag') }}\n\n), fields as (\n\n    select\n        tag_id,\n        task_id\n\n    from task_tag\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task_tag"], "unique_id": "model.asana_source.stg_asana_task_tag", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task_tag.sql", "original_file_path": "models/stg_asana_task_tag.sql", "name": "stg_asana_task_tag", "resource_type": "model", "alias": "stg_asana_task_tag", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task_tag"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_tag"]}, "description": "Table of tasks with the tags attached to them. Tasks without tags (and vice versa) do not appear here.", "columns": {"tag_id": {"name": "tag_id", "description": "Foreign key referencing the ID of the TAG attached to the task", "meta": {}, "data_type": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task_tag.sql", "compiled": true, "compiled_sql": "with task_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n), fields as (\n\n    select\n        tag_id,\n        task_id\n\n    from task_tag\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n), fields as (\n\n    select\n        tag_id,\n        task_id\n\n    from task_tag\n\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_task_follower": {"raw_sql": "with task_follower as (\n\n    select *\n    from {{ var('task_follower') }}\n\n), fields as (\n\n    select\n        task_id,\n        user_id\n\n    from task_follower\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task_follower"], "unique_id": "model.asana_source.stg_asana_task_follower", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task_follower.sql", "original_file_path": "models/stg_asana_task_follower.sql", "name": "stg_asana_task_follower", "resource_type": "model", "alias": "stg_asana_task_follower", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task_follower"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_follower"]}, "description": "Table of tasks with the users that are following them. Tasks without users do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK being followed.", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the USER following the task.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task_follower.sql", "compiled": true, "compiled_sql": "with task_follower as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n), fields as (\n\n    select\n        task_id,\n        user_id\n\n    from task_follower\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_follower as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n), fields as (\n\n    select\n        task_id,\n        user_id\n\n    from task_follower\n\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_task_section": {"raw_sql": "with task_section as (\n\n    select *\n    from {{ var('task_section') }}\n\n), fields as (\n\n    select\n        section_id,\n        task_id\n\n    from task_section\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_task_section"], "unique_id": "model.asana_source.stg_asana_task_section", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_task_section.sql", "original_file_path": "models/stg_asana_task_section.sql", "name": "stg_asana_task_section", "resource_type": "model", "alias": "stg_asana_task_section", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "task_section"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_section"]}, "description": "Table of tasks and the section that they live under. Section-less tasks within projects appear here, but project-less tasks do not", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "tags": []}, "section_id": {"name": "section_id", "description": "Foreign key referencing the ID of the SECTION housing the task", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_task_section.sql", "compiled": true, "compiled_sql": "with task_section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_section`\n\n), fields as (\n\n    select\n        section_id,\n        task_id\n\n    from task_section\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with task_section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`task_section`\n\n), fields as (\n\n    select\n        section_id,\n        task_id\n\n    from task_section\n\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_tag": {"raw_sql": "with asana_tag as (\n\n    select *\n    from {{ var('tag') }}\n\n), fields as (\n\n    select\n        id as tag_id,\n        name as tag_name,\n        created_at\n\n    from asana_tag\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_tag"], "unique_id": "model.asana_source.stg_asana_tag", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_tag.sql", "original_file_path": "models/stg_asana_tag.sql", "name": "stg_asana_tag", "resource_type": "model", "alias": "stg_asana_tag", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "tag"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.tag"]}, "description": "Table of the custom tags made in the organization", "columns": {"tag_id": {"name": "tag_id", "description": "System generated unique ID of the tag", "meta": {}, "data_type": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "User-facing name of the tag.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_tag.sql", "compiled": true, "compiled_sql": "with asana_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`tag`\n\n), fields as (\n\n    select\n        id as tag_id,\n        name as tag_name,\n        created_at\n\n    from asana_tag\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with asana_tag as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`tag`\n\n), fields as (\n\n    select\n        id as tag_id,\n        name as tag_name,\n        created_at\n\n    from asana_tag\n    where not _fivetran_deleted\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_section": {"raw_sql": "with section as (\n\n    select *\n    from {{ var('section') }}\n\n), fields as (\n\n    select\n        id as section_id,\n        created_at,\n        name as section_name,\n        project_id\n\n    from section\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_section"], "unique_id": "model.asana_source.stg_asana_section", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_section.sql", "original_file_path": "models/stg_asana_section.sql", "name": "stg_asana_section", "resource_type": "model", "alias": "stg_asana_section", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.section"]}, "description": "Table of all sections within projects. If tasks in a project are not in an explicit user-made section, a default section called \"(no section)\" is created here", "columns": {"section_id": {"name": "section_id", "description": "System-generated unique ID of the section", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the section was created", "meta": {}, "data_type": null, "tags": []}, "section_name": {"name": "section_name", "description": "User-facing name of the section.", "meta": {}, "data_type": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the id of the PROJECT the section lives in.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_section.sql", "compiled": true, "compiled_sql": "with section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`section`\n\n), fields as (\n\n    select\n        id as section_id,\n        created_at,\n        name as section_name,\n        project_id\n\n    from section\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with section as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`section`\n\n), fields as (\n\n    select\n        id as section_id,\n        created_at,\n        name as section_name,\n        project_id\n\n    from section\n\n)\n\nselect *\nfrom fields"}, "model.asana_source.stg_asana_story": {"raw_sql": "with story as (\n\n    select *\n    from {{ var('story') }}\n\n), fields as (\n\n    select\n      id as story_id,\n      created_at,\n      created_by_id as created_by_user_id,\n      target_id as target_task_id,\n      text as story_content,\n      type as event_type\n\n    from story\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "stg_asana_story"], "unique_id": "model.asana_source.stg_asana_story", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "stg_asana_story.sql", "original_file_path": "models/stg_asana_story.sql", "name": "stg_asana_story", "resource_type": "model", "alias": "stg_asana_story", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.story"]}, "description": "Table containing all stories -- stories are actions taken on tasks", "columns": {"story_id": {"name": "story_id", "description": "System generated unique ID of the story/action taken on a task.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story occurred.", "meta": {}, "data_type": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Foreign key referencing the USER who took the action (sometimes null)", "meta": {}, "data_type": null, "tags": []}, "target_task_id": {"name": "target_task_id", "description": "Foreign key referncing the TASK that the action was taken on.", "meta": {}, "data_type": null, "tags": []}, "story_content": {"name": "story_content", "description": "Free-form text that is either the content of a comment (event_type=comment) or the description of an action (event_type=system)", "meta": {}, "data_type": null, "tags": []}, "event_type": {"name": "event_type", "description": "The origin type of the story - a comment or change to the backend (ie altering a task somehow)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_asana.yml", "build_path": "target/compiled/asana_source/models/stg_asana_story.sql", "compiled": true, "compiled_sql": "with story as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`story`\n\n), fields as (\n\n    select\n      id as story_id,\n      created_at,\n      created_by_id as created_by_user_id,\n      target_id as target_task_id,\n      text as story_content,\n      type as event_type\n\n    from story\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with story as (\n\n    select *\n    from `dbt-package-testing`.`asana`.`story`\n\n), fields as (\n\n    select\n      id as story_id,\n      created_at,\n      created_by_id as created_by_user_id,\n      target_id as target_task_id,\n      text as story_content,\n      type as event_type\n\n    from story\n)\n\nselect *\nfrom fields"}, "test.asana_source.unique_stg_asana_project_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ ref('stg_asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_project_project_id"], "unique_id": "test.asana_source.unique_stg_asana_project_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_project_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_project_project_id", "resource_type": "test", "alias": "unique_stg_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        project_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\n    where project_id is not null\n    group by project_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "project_id"}, "test.asana_source.not_null_stg_asana_project_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('stg_asana_project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_project_project_id"], "unique_id": "test.asana_source.not_null_stg_asana_project_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_project_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_project_project_id", "resource_type": "test", "alias": "not_null_stg_asana_project_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_project_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project`\nwhere project_id is null\n\n", "column_name": "project_id"}, "test.asana_source.not_null_stg_asana_project_task_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ ref('stg_asana_project_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_project_task_project_id"], "unique_id": "test.asana_source.not_null_stg_asana_project_task_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_project_task_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_project_task_project_id", "resource_type": "test", "alias": "not_null_stg_asana_project_task_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_project_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_project_task_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere project_id is null\n\n", "column_name": "project_id"}, "test.asana_source.not_null_stg_asana_project_task_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_project_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_project_task_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_project_task_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_project_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_project_task_task_id", "resource_type": "test", "alias": "not_null_stg_asana_project_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_project_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_project_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_project_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_project_task`\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana_source.unique_stg_asana_section_section_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "section_id", "model": "{{ ref('stg_asana_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_section_section_id"], "unique_id": "test.asana_source.unique_stg_asana_section_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_section_section_id", "resource_type": "test", "alias": "unique_stg_asana_section_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_section_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        section_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_id is not null\n    group by section_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        section_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\n    where section_id is not null\n    group by section_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "section_id"}, "test.asana_source.not_null_stg_asana_section_section_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ ref('stg_asana_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_section_section_id"], "unique_id": "test.asana_source.not_null_stg_asana_section_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_section_section_id", "resource_type": "test", "alias": "not_null_stg_asana_section_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_section_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\nwhere section_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_section`\nwhere section_id is null\n\n", "column_name": "section_id"}, "test.asana_source.unique_stg_asana_story_story_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "story_id", "model": "{{ ref('stg_asana_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_story_story_id"], "unique_id": "test.asana_source.unique_stg_asana_story_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_story_story_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_story_story_id", "resource_type": "test", "alias": "unique_stg_asana_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        story_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\n    where story_id is not null\n    group by story_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "story_id"}, "test.asana_source.not_null_stg_asana_story_story_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "story_id", "model": "{{ ref('stg_asana_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_story_story_id"], "unique_id": "test.asana_source.not_null_stg_asana_story_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_story_story_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_story_story_id", "resource_type": "test", "alias": "not_null_stg_asana_story_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_story_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere story_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere story_id is null\n\n", "column_name": "story_id"}, "test.asana_source.not_null_stg_asana_story_target_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "target_task_id", "model": "{{ ref('stg_asana_story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_story_target_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_story_target_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_story_target_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_story_target_task_id", "resource_type": "test", "alias": "not_null_stg_asana_story_target_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_story"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_story_target_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere target_task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_story`\nwhere target_task_id is null\n\n", "column_name": "target_task_id"}, "test.asana_source.unique_stg_asana_tag_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ ref('stg_asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_tag_tag_id"], "unique_id": "test.asana_source.unique_stg_asana_tag_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_tag_tag_id", "resource_type": "test", "alias": "unique_stg_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        tag_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\n    where tag_id is not null\n    group by tag_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "tag_id"}, "test.asana_source.not_null_stg_asana_tag_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ ref('stg_asana_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_tag_tag_id"], "unique_id": "test.asana_source.not_null_stg_asana_tag_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_tag_tag_id", "resource_type": "test", "alias": "not_null_stg_asana_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\nwhere tag_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_tag`\nwhere tag_id is null\n\n", "column_name": "tag_id"}, "test.asana_source.unique_stg_asana_task_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_task_task_id"], "unique_id": "test.asana_source.unique_stg_asana_task_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_task_task_id", "resource_type": "test", "alias": "unique_stg_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        task_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\n    where task_id is not null\n    group by task_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "task_id"}, "test.asana_source.not_null_stg_asana_task_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task`\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana_source.not_null_stg_asana_task_follower_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task_follower') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_follower_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_follower_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_follower_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_follower_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_follower_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_follower"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_follower"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_follower_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana_source.not_null_stg_asana_task_follower_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_asana_task_follower') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_follower_user_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_follower_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_follower_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_follower_user_id", "resource_type": "test", "alias": "not_null_stg_asana_task_follower_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_follower"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_follower"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_follower_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_follower`\nwhere user_id is null\n\n", "column_name": "user_id"}, "test.asana_source.not_null_stg_asana_task_section_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_section_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_section_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_section_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_section_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_section_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_section_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana_source.not_null_stg_asana_task_section_section_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ ref('stg_asana_task_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_section_section_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_section_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_section_section_id", "resource_type": "test", "alias": "not_null_stg_asana_task_section_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_section"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_section_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere section_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_section`\nwhere section_id is null\n\n", "column_name": "section_id"}, "test.asana_source.not_null_stg_asana_task_tag_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ ref('stg_asana_task_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_tag_tag_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_tag_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_tag_tag_id", "resource_type": "test", "alias": "not_null_stg_asana_task_tag_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_tag_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere tag_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere tag_id is null\n\n", "column_name": "tag_id"}, "test.asana_source.not_null_stg_asana_task_tag_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ ref('stg_asana_task_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_task_tag_task_id"], "unique_id": "test.asana_source.not_null_stg_asana_task_tag_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_task_tag_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_task_tag_task_id", "resource_type": "test", "alias": "not_null_stg_asana_task_tag_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_task_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_task_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_task_tag_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere task_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_task_tag`\nwhere task_id is null\n\n", "column_name": "task_id"}, "test.asana_source.unique_stg_asana_team_team_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ ref('stg_asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_team_team_id"], "unique_id": "test.asana_source.unique_stg_asana_team_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_team_team_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_team_team_id", "resource_type": "test", "alias": "unique_stg_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        team_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\n    where team_id is not null\n    group by team_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "team_id"}, "test.asana_source.not_null_stg_asana_team_team_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ ref('stg_asana_team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_team_team_id"], "unique_id": "test.asana_source.not_null_stg_asana_team_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_team_team_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_team_team_id", "resource_type": "test", "alias": "not_null_stg_asana_team_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_team"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_team_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\nwhere team_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_team`\nwhere team_id is null\n\n", "column_name": "team_id"}, "test.asana_source.unique_stg_asana_user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "unique_stg_asana_user_user_id"], "unique_id": "test.asana_source.unique_stg_asana_user_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/unique_stg_asana_user_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana_user_user_id", "resource_type": "test", "alias": "unique_stg_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.asana_source.stg_asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/unique_stg_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        user_id\n\n    from `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id"}, "test.asana_source.not_null_stg_asana_user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_asana_user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "not_null_stg_asana_user_user_id"], "unique_id": "test.asana_source.not_null_stg_asana_user_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/not_null_stg_asana_user_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana_user_user_id", "resource_type": "test", "alias": "not_null_stg_asana_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_asana_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.asana_source.stg_asana_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/stg_asana.yml/schema_test/not_null_stg_asana_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_jamie`.`stg_asana_user`\nwhere user_id is null\n\n", "column_name": "user_id"}, "test.asana_source.source_unique_asana_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_user_id"], "unique_id": "test.asana_source.source_unique_asana_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_user_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_user_id", "resource_type": "test", "alias": "source_unique_asana_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "user"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`user`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`user`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'user') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_user_id"], "unique_id": "test.asana_source.source_not_null_asana_user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_user_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_user_id", "resource_type": "test", "alias": "source_not_null_asana_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "user"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`user`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`user`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_unique_asana_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_task_id"], "unique_id": "test.asana_source.source_unique_asana_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_task_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_task_id", "resource_type": "test", "alias": "source_unique_asana_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`task`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`task`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_task_id"], "unique_id": "test.asana_source.source_not_null_asana_task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_task_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_task_id", "resource_type": "test", "alias": "source_not_null_asana_task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_task_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_task_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ source('asana', 'task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_task_created_at"], "unique_id": "test.asana_source.source_not_null_asana_task_created_at", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_task_created_at.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_task_created_at", "resource_type": "test", "alias": "source_not_null_asana_task_created_at", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_task_created_at.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere created_at is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`task`\nwhere created_at is null\n\n", "column_name": "created_at"}, "test.asana_source.source_unique_asana_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_project_id"], "unique_id": "test.asana_source.source_unique_asana_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_project_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_project_id", "resource_type": "test", "alias": "source_unique_asana_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`project`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`project`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_project_id"], "unique_id": "test.asana_source.source_not_null_asana_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_project_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_project_id", "resource_type": "test", "alias": "source_not_null_asana_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_project_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ source('asana', 'project') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_project_created_at"], "unique_id": "test.asana_source.source_not_null_asana_project_created_at", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_project_created_at.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_project_created_at", "resource_type": "test", "alias": "source_not_null_asana_project_created_at", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.project"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_project_created_at.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere created_at is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`project`\nwhere created_at is null\n\n", "column_name": "created_at"}, "test.asana_source.source_unique_asana_story_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_story_id"], "unique_id": "test.asana_source.source_unique_asana_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_story_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_story_id", "resource_type": "test", "alias": "source_unique_asana_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`story`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`story`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_story_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_story_id"], "unique_id": "test.asana_source.source_not_null_asana_story_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_story_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_story_id", "resource_type": "test", "alias": "source_not_null_asana_story_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_story_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_story_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_story_created_at"], "unique_id": "test.asana_source.source_not_null_asana_story_created_at", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_story_created_at.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_story_created_at", "resource_type": "test", "alias": "source_not_null_asana_story_created_at", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_story_created_at.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere created_at is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere created_at is null\n\n", "column_name": "created_at"}, "test.asana_source.source_not_null_asana_story_target_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "target_id", "model": "{{ source('asana', 'story') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_story_target_id"], "unique_id": "test.asana_source.source_not_null_asana_story_target_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_story_target_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_story_target_id", "resource_type": "test", "alias": "source_not_null_asana_story_target_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "story"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.story"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_story_target_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere target_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`story`\nwhere target_id is null\n\n", "column_name": "target_id"}, "test.asana_source.source_unique_asana_team_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_team_id"], "unique_id": "test.asana_source.source_unique_asana_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_team_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_team_id", "resource_type": "test", "alias": "source_unique_asana_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "team"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`team`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`team`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_team_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'team') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_team_id"], "unique_id": "test.asana_source.source_not_null_asana_team_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_team_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_team_id", "resource_type": "test", "alias": "source_not_null_asana_team_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "team"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.team"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_team_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`team`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`team`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_unique_asana_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_tag_id"], "unique_id": "test.asana_source.source_unique_asana_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_tag_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_tag_id", "resource_type": "test", "alias": "source_unique_asana_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "tag"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`tag`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`tag`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_tag_id"], "unique_id": "test.asana_source.source_not_null_asana_tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_tag_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_tag_id", "resource_type": "test", "alias": "source_not_null_asana_tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "tag"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_tag_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`tag`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`tag`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_unique_asana_section_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_unique_asana_section_id"], "unique_id": "test.asana_source.source_unique_asana_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_unique_asana_section_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_unique_asana_section_id", "resource_type": "test", "alias": "source_unique_asana_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.asana_source.asana.section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_unique_asana_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`section`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from `dbt-package-testing`.`asana`.`section`\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_section_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('asana', 'section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_section_id"], "unique_id": "test.asana_source.source_not_null_asana_section_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_section_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_section_id", "resource_type": "test", "alias": "source_not_null_asana_section_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_section_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere id is null\n\n", "column_name": "id"}, "test.asana_source.source_not_null_asana_section_project_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ source('asana', 'section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "source_not_null_asana_section_project_id"], "unique_id": "test.asana_source.source_not_null_asana_section_project_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/source_not_null_asana_section_project_id.sql", "original_file_path": "models/src_asana.yml", "name": "source_not_null_asana_section_project_id", "resource_type": "test", "alias": "source_not_null_asana_section_project_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "section"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.asana_source.asana.section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/source_not_null_asana_section_project_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere project_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`asana`.`section`\nwhere project_id is null\n\n", "column_name": "project_id"}, "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["project_id", "task_id"], "model": "{{ source('asana', 'project_task') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "project_task"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.project_task"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        project_id, task_id\n    from `dbt-package-testing`.`asana`.`project_task`\n\n    group by project_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        project_id, task_id\n    from `dbt-package-testing`.`asana`.`project_task`\n\n    group by project_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_id", "user_id"], "model": "{{ source('asana', 'task_follower') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task_follower"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.task_follower"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, user_id\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n    group by task_id, user_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, user_id\n    from `dbt-package-testing`.`asana`.`task_follower`\n\n    group by task_id, user_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_id", "tag_id"], "model": "{{ source('asana', 'task_tag') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task_tag"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.task_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, tag_id\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n    group by task_id, tag_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        task_id, tag_id\n    from `dbt-package-testing`.`asana`.`task_tag`\n\n    group by task_id, tag_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}, "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["section_id", "task_id"], "model": "{{ source('asana', 'task_section') }}"}}, "database": "dbt-package-testing", "schema": "dbt_jamie", "fqn": ["asana_source", "schema_test", "dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id"], "unique_id": "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id.sql", "original_file_path": "models/src_asana.yml", "name": "dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id", "resource_type": "test", "alias": "dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["asana", "task_section"]], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["source.asana_source.asana.task_section"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/asana_source/models/src_asana.yml/schema_test/dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id.sql", "compiled": true, "compiled_sql": "\n\nwith validation_errors as (\n\n    select\n        section_id, task_id\n    from `dbt-package-testing`.`asana`.`task_section`\n\n    group by section_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith validation_errors as (\n\n    select\n        section_id, task_id\n    from `dbt-package-testing`.`asana`.`task_section`\n\n    group by section_id, task_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "column_name": null}}, "sources": {"source.asana_source.asana.user": {"fqn": ["asana_source", "asana", "user"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.user", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "user", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of all accounts in the organization", "columns": {"id": {"name": "id", "description": "System generated unique ID for a user", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "Given name for the user as it appears in the UI", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.task": {"fqn": ["asana_source", "asana", "task"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.task", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all created tasks", "columns": {"id": {"name": "id", "description": "System generated unique identifier for the task", "meta": {}, "data_type": null, "tags": []}, "assignee_id": {"name": "assignee_id", "description": "Foreign key referencing the USER assigned to this task (note that a task may not have an assignee)", "meta": {}, "data_type": null, "tags": []}, "assignee_status": {"name": "assignee_status", "description": "Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of \"My Tasks\"", "meta": {}, "data_type": null, "tags": []}, "completed": {"name": "completed", "description": "Boolean that's true if the task is *currently* marked completed. Note that a task can be unmarked complete", "meta": {}, "data_type": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was completed, if still currently completed.", "meta": {}, "data_type": null, "tags": []}, "completed_by_id": {"name": "completed_by_id", "description": "Foreign key that references the USER who completed the task, if currently completed.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was first made", "meta": {}, "data_type": null, "tags": []}, "due_on": {"name": "due_on", "description": "The date on which the task is due. Note that not tasks may not have a due date", "meta": {}, "data_type": null, "tags": []}, "due_at": {"name": "due_at", "description": "The date and time at which the task is due, only if a specific time is given.", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The last time the task was updated. Does not include comments nor changes in associations (ie their projects)", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The title of the task", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual description of the task (as seen in the UI)", "meta": {}, "data_type": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of the parent of the task, if it is a subtask. Self-refers to TASK", "meta": {}, "data_type": null, "tags": []}, "start_on": {"name": "start_on", "description": "The start date of the task, if given with the due date", "meta": {}, "data_type": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The id of an organization's workspace in asana. Not necessary unless you have access to multiple organization's asanas.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.project": {"fqn": ["asana_source", "asana", "project"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.project", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "project", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "project", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table containing all projects", "columns": {"id": {"name": "id", "description": "System generated unique ID of the project", "meta": {}, "data_type": null, "tags": []}, "archived": {"name": "archived", "description": "Boolean representing whether the project has been archived (removed from asana UI)", "meta": {}, "data_type": null, "tags": []}, "color": {"name": "color", "description": "Color of the project as seen in the UI", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story was made/the action was logged", "meta": {}, "data_type": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project. This is sent to all project followers", "meta": {}, "data_type": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due", "meta": {}, "data_type": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The last time the project was updated. Does not include comments nor changes in associations (ie new tasks)", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The given name of the project", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual notes associated with the project.", "meta": {}, "data_type": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "tags": []}, "public": {"name": "public", "description": "Boolean that is true if the project is public to the whole organization, false if not.", "meta": {}, "data_type": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the TEAM that the project is shared with.", "meta": {}, "data_type": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The id of an organization's workspace in asana. Not necessary unless you have access to multiple asana workspaces.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.story": {"fqn": ["asana_source", "asana", "story"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.story", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "story", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "story", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all stories -- stories are actions taken on tasks", "columns": {"id": {"name": "id", "description": "System generated unique ID of the story/action taken", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story was made/the action was logged", "meta": {}, "data_type": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Foreign key referencing the USER who created the story/took the action on the task (sometimes null)", "meta": {}, "data_type": null, "tags": []}, "target_id": {"name": "target_id", "description": "Foreign key referencing the TASK that the story is about.", "meta": {}, "data_type": null, "tags": []}, "text": {"name": "text", "description": "Free-form text describing the action that was taken (if type = system), or the content of a comment (if type = comment)", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The origin type of the story - a comment or change to the backend/altering a task", "meta": {}, "data_type": null, "tags": []}, "source": {"name": "source", "description": "Where the story occurred (web, mobile, email, or api)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.team": {"fqn": ["asana_source", "asana", "team"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.team", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "team", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "team", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of the teams within the organization", "columns": {"id": {"name": "id", "description": "System generated unique ID for each team", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "Provided name for each team. There can be duplicates", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Equivalent to the workspace_id, as organizations are a kind of workspace. Probably not relevant unless working with multiple orgs.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.tag": {"fqn": ["asana_source", "asana", "tag"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.tag", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "tag", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of the custom tags made in the organization", "columns": {"id": {"name": "id", "description": "System generated ID for each tag", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The name of the tag as it appears in the UI. There can be duplicates.", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "tags": []}, "color": {"name": "color", "description": "Chosen color of the tag as it appears in the UI", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.section": {"fqn": ["asana_source", "asana", "section"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.section", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "section", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "section", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of all sections within projects. If tasks in a project are not in an explicit user-made section, a default section called \"(no section)\" is created here", "columns": {"id": {"name": "id", "description": "System generated unique ID for each section", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the section was created by a user", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The given name of the section as it appears in the UI. Is stored as \"(no section)\" when this is the default bucket for sectionless tasks in a project", "meta": {}, "data_type": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the PROJECT that the section lives in", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.project_task": {"fqn": ["asana_source", "asana", "project_task"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.project_task", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "project_task", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "project_task", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks and the project(s) they each belong to. If a project doesn't have a task, it won't be in here (and vice versa)", "columns": {"project_id": {"name": "project_id", "description": "Foreign key referencing a PROJECT the task belongs to", "meta": {}, "data_type": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referncing the TASK in the project", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.task_follower": {"fqn": ["asana_source", "asana", "task_follower"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.task_follower", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task_follower", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_follower", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks with the users that are following them. Tasks without users do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the TASK being followed", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER that is following the task", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.task_tag": {"fqn": ["asana_source", "asana", "task_tag"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.task_tag", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task_tag", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks with the tags attached to them. Tasks without tags (and vice versa) do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the TASK that is tagged", "meta": {}, "data_type": null, "tags": []}, "tag_id": {"name": "tag_id", "description": "Foreign key referencing the TAG that is applied to the task", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.asana_source.asana.task_section": {"fqn": ["asana_source", "asana", "task_section"], "database": "dbt-package-testing", "schema": "asana", "unique_id": "source.asana_source.asana.task_section", "package_name": "asana_source", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task_section", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_section", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks and the section that they live under. Section-less tasks within projects appear here, but project-less tasks do not", "columns": {"section_id": {"name": "section_id", "description": "Foreign key referencing the SECTION that the task lives under.", "meta": {}, "data_type": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the TASK that lives in a section.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}}, "macros": {"macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter_macro('snapshot_merge_sql', target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter_macro('snapshot_string_as_time', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['injected_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    select * from insertions\n    union all\n    select * from updates\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter_macro('create_csv_table', model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter_macro('load_csv_rows', model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', status='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter_macro('get_insert_overwrite_merge_sql', target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n    \n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter_macro(\"dbt.handle_existing_table\", full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(flags.FULL_REFRESH, old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not flags.FULL_REFRESH) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter_macro('generate_database_name', custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.adapter_macro"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.adapter_macro": {"unique_id": "macro.dbt.adapter_macro", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "adapter_macro", "macro_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter_macro('create_schema', relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter_macro('drop_schema', relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.adapter_macro"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter_macro('alter_column_comment', relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter_macro('alter_relation_comment', relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter_macro('persist_docs', relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter_macro('list_relations_without_caching', schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_column_descriptions(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['injected_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', status=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n  {%- set partition_type =\n      'date' if partition_by.data_type in ('timestamp, datetime') \n      else partition_by.data_type -%}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n  \n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n      \n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n  \n  {% else %} {# dynamic #}\n  \n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n      \n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n  \n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n     \n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n        \n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.asana.string_agg": {"unique_id": "macro.asana.string_agg", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter_macro('asana.string_agg', field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.asana.default__string_agg": {"unique_id": "macro.asana.default__string_agg", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.asana.snowflake__string_agg": {"unique_id": "macro.asana.snowflake__string_agg", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.asana.redshift__string_agg": {"unique_id": "macro.asana.redshift__string_agg", "package_name": "asana", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ adapter_macro('dbt_utils.except') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ adapter_macro('dbt_utils.replace', field, old_chars, new_chars) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ adapter_macro('dbt_utils.concat', fields) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{dbt_utils.alternative_concat(fields)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{dbt_utils.alternative_concat(fields)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ adapter_macro('dbt_utils.type_string') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ adapter_macro('dbt_utils.type_timestamp') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ adapter_macro('dbt_utils.type_float') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ adapter_macro('dbt_utils.type_numeric') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ adapter_macro('dbt_utils.type_bigint') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ adapter_macro('dbt_utils.type_int') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ adapter_macro('dbt_utils.length', expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ adapter_macro('dbt_utils.dateadd', datepart, interval, from_date_or_timestamp) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ adapter_macro('dbt_utils.intersect') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ adapter_macro('dbt_utils.right', string_text, length_expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ adapter_macro('dbt_utils.datediff', first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ adapter_macro('dbt_utils.safe_cast', field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ adapter_macro('dbt_utils.hash', field) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {% do exceptions.warn(\"Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use `adapter.quote` instead\") %}\n  {{ adapter_macro('dbt_utils.identifier', value) }}\t\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ adapter_macro('dbt_utils.position', substring_text, string_text) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ adapter_macro('dbt_utils.string_literal', value) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter_macro('dbt_utils.current_timestamp') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ adapter_macro('dbt_utils.current_timestamp_in_utc') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ adapter_macro('dbt_utils.width_bucket', expr, min_value, max_value, num_buckets) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ adapter_macro('dbt_utils.last_day', date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    {{ exceptions.raise_compiler_error(\n        \"dbt_utils.last_day is not supported for datepart 'quarter' on this adapter\") }}\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ adapter_macro('dbt_utils.split_part', string_text, delimiter_text, part_number) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ adapter_macro('dbt_utils.date_trunc', datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {%- set rows_inserted = (load_result('main-' ~ i)['status'].split(\" \"))[2] | int -%}\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement(name='main', status=status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1,lon1,lat2,lon2) -%}\n\n    2 * 3961 * asin(sqrt((sin(radians(({{lat2}} - {{lat1}}) / 2))) ^ 2 +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    (sin(radians(({{lon2}} - {{lon1}}) / 2))) ^ 2))\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{% set from_condition = kwargs.get('from_condition', \"true\") %}\n{% set to_condition = kwargs.get('to_condition', \"true\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          count(distinct {{ column_name }})\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n\n      count({{ column_name }})\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{%- set columns_csv=columns | join(', ') %}\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by 1\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by 1\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='true') %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not({{expression}})\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_columns = kwargs.get('compare_columns', adapter.get_columns_in_relation(model) | map(attribute='quoted') ) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound < upper_bound,\n            false\n        ) as lower_bound_less_than_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_less_than_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(database, row.table_schema, row.table_name) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix": {"unique_id": "macro.dbt_utils.get_tables_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_tables_by_prefix", "macro_sql": "{% macro get_tables_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {% do exceptions.warn(\"Warning: the `get_tables_by_prefix` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `get_relations_by_prefix` macro instead\") %}\n\n    {{ return(dbt_utils.get_relations_by_prefix(schema, prefix, exclude, database)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ adapter_macro('dbt_utils.get_tables_by_prefix_sql', schema, prefix, exclude, database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n        select distinct \n            table_schema as \"table_schema\", table_name as \"table_name\"\n        from {{database}}.information_schema.tables\n        where table_schema ilike '{{ schema }}'\n        and table_name ilike '{{ prefix }}%'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "bigquery__get_tables_by_prefix_sql", "macro_sql": "{% macro bigquery__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    \n        select distinct\n            dataset_id as table_schema, table_id as table_name\n\n        from {{adapter.quote(database)}}.{{schema}}.__TABLES_SUMMARY__\n        where dataset_id = '{{schema}}'\n            and lower(table_id) like lower ('{{prefix}}%')\n            and lower(table_id) not like lower ('{{exclude}}')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {% do exceptions.warn(\"Warning: the `unpivot` macro no longer accepts a `table` parameter. This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead\") %}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast({{ col.column }} as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_tables": {"unique_id": "macro.dbt_utils.union_tables", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n\n\n{%- if varargs|length >= 1 %}\n\n{%- do exceptions.warn(\"Warning: the `surrogate_key` macro now takes a single list argument instead of multiple string arguments. Support for multiple string arguments will be deprecated in a future release of dbt-utils.\") -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True) %}\n  {% for v in values %}\n    {{ agg }}(\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jamie.rodriguez/Documents/github_repos/asana_fake/dbt_asana/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://slack.getdbt.com/) on Slack for live questions and support."}}, "disabled": [], "generated_at": "2020-08-07T18:56:45.157503Z", "parent_map": {"model.asana.asana_user": ["model.asana.asana_project_user", "model.asana.asana_user_task_metrics", "model.asana_source.stg_asana_user"], "model.asana.asana_task": ["model.asana.asana_subtask_parent", "model.asana.asana_task_assignee", "model.asana.asana_task_comments", "model.asana.asana_task_first_modifier", "model.asana.asana_task_followers", "model.asana.asana_task_open_length", "model.asana.asana_task_projects", "model.asana.asana_task_tags", "model.asana_source.stg_asana_task"], "model.asana.asana_team": ["model.asana.asana_project", "model.asana_source.stg_asana_team"], "model.asana.asana_project": ["model.asana.asana_project_task_metrics", "model.asana.asana_project_user", "model.asana_source.stg_asana_project", "model.asana_source.stg_asana_section", "model.asana_source.stg_asana_team", "model.asana_source.stg_asana_user"], "model.asana.asana_daily_metrics": ["model.asana.asana_task"], "model.asana.asana_tag": ["model.asana.asana_task", "model.asana_source.stg_asana_tag", "model.asana_source.stg_asana_task_tag"], "model.asana.asana_subtask_parent": ["model.asana.asana_task_assignee"], "model.asana.asana_task_assignee": ["model.asana_source.stg_asana_task", "model.asana_source.stg_asana_user"], "model.asana.asana_task_first_modifier": ["model.asana.asana_task_story"], "model.asana.asana_project_task_metrics": ["model.asana.asana_task", "model.asana_source.stg_asana_project", "model.asana_source.stg_asana_project_task"], "model.asana.asana_user_task_metrics": ["model.asana.asana_task"], "model.asana.asana_task_comments": ["model.asana.asana_task_story"], "model.asana.asana_project_user": ["model.asana.asana_task_assignee", "model.asana_source.stg_asana_project", "model.asana_source.stg_asana_project_task"], "model.asana.asana_task_tags": ["model.asana_source.stg_asana_tag", "model.asana_source.stg_asana_task_tag"], "model.asana.asana_task_followers": ["model.asana_source.stg_asana_task_follower", "model.asana_source.stg_asana_user"], "model.asana.asana_task_open_length": ["model.asana.asana_task_story", "model.asana_source.stg_asana_task"], "model.asana.asana_task_story": ["model.asana_source.stg_asana_story", "model.asana_source.stg_asana_user"], "model.asana.asana_task_projects": ["model.asana_source.stg_asana_project", "model.asana_source.stg_asana_project_task", "model.asana_source.stg_asana_section", "model.asana_source.stg_asana_task_section"], "test.asana.unique_asana_task_task_id": ["model.asana.asana_task"], "test.asana.not_null_asana_task_task_id": ["model.asana.asana_task"], "test.asana.unique_asana_user_user_id": ["model.asana.asana_user"], "test.asana.not_null_asana_user_user_id": ["model.asana.asana_user"], "test.asana.unique_asana_project_project_id": ["model.asana.asana_project"], "test.asana.not_null_asana_project_project_id": ["model.asana.asana_project"], "test.asana.unique_asana_team_team_id": ["model.asana.asana_team"], "test.asana.not_null_asana_team_team_id": ["model.asana.asana_team"], "test.asana.unique_asana_tag_tag_id": ["model.asana.asana_tag"], "test.asana.not_null_asana_tag_tag_id": ["model.asana.asana_tag"], "test.asana.unique_asana_daily_metrics_date_day": ["model.asana.asana_daily_metrics"], "test.asana.not_null_asana_daily_metrics_date_day": ["model.asana.asana_daily_metrics"], "test.asana.unique_asana_project_task_metrics_project_id": ["model.asana.asana_project_task_metrics"], "test.asana.not_null_asana_project_task_metrics_project_id": ["model.asana.asana_project_task_metrics"], "test.asana.unique_asana_project_user_project_id_user_id_role_currently_working_on": ["model.asana.asana_project_user"], "test.asana.unique_asana_subtask_parent_subtask_id": ["model.asana.asana_subtask_parent"], "test.asana.not_null_asana_subtask_parent_subtask_id": ["model.asana.asana_subtask_parent"], "test.asana.unique_asana_task_assignee_task_id": ["model.asana.asana_task_assignee"], "test.asana.not_null_asana_task_assignee_task_id": ["model.asana.asana_task_assignee"], "test.asana.unique_asana_task_comments_task_id": ["model.asana.asana_task_comments"], "test.asana.not_null_asana_task_comments_task_id": ["model.asana.asana_task_comments"], "test.asana.unique_asana_task_first_modifier_task_id": ["model.asana.asana_task_first_modifier"], "test.asana.not_null_asana_task_first_modifier_task_id": ["model.asana.asana_task_first_modifier"], "test.asana.unique_asana_task_followers_task_id": ["model.asana.asana_task_followers"], "test.asana.not_null_asana_task_followers_task_id": ["model.asana.asana_task_followers"], "test.asana.unique_asana_task_open_length_task_id": ["model.asana.asana_task_open_length"], "test.asana.not_null_asana_task_open_length_task_id": ["model.asana.asana_task_open_length"], "test.asana.unique_asana_task_projects_task_id": ["model.asana.asana_task_projects"], "test.asana.not_null_asana_task_projects_task_id": ["model.asana.asana_task_projects"], "test.asana.unique_asana_task_story_story_id": ["model.asana.asana_task_story"], "test.asana.not_null_asana_task_story_story_id": ["model.asana.asana_task_story"], "test.asana.unique_asana_task_tags_task_id": ["model.asana.asana_task_tags"], "test.asana.not_null_asana_task_tags_task_id": ["model.asana.asana_task_tags"], "test.asana.unique_asana_user_task_metrics_user_id": ["model.asana.asana_user_task_metrics"], "test.asana.not_null_asana_user_task_metrics_user_id": ["model.asana.asana_user_task_metrics"], "model.asana_source.stg_asana_team": ["source.asana_source.asana.team"], "model.asana_source.stg_asana_project_task": ["source.asana_source.asana.project_task"], "model.asana_source.stg_asana_project": ["source.asana_source.asana.project"], "model.asana_source.stg_asana_task": ["source.asana_source.asana.task"], "model.asana_source.stg_asana_user": ["source.asana_source.asana.user"], "model.asana_source.stg_asana_task_tag": ["source.asana_source.asana.task_tag"], "model.asana_source.stg_asana_task_follower": ["source.asana_source.asana.task_follower"], "model.asana_source.stg_asana_task_section": ["source.asana_source.asana.task_section"], "model.asana_source.stg_asana_tag": ["source.asana_source.asana.tag"], "model.asana_source.stg_asana_section": ["source.asana_source.asana.section"], "model.asana_source.stg_asana_story": ["source.asana_source.asana.story"], "test.asana_source.unique_stg_asana_project_project_id": ["model.asana_source.stg_asana_project"], "test.asana_source.not_null_stg_asana_project_project_id": ["model.asana_source.stg_asana_project"], "test.asana_source.not_null_stg_asana_project_task_project_id": ["model.asana_source.stg_asana_project_task"], "test.asana_source.not_null_stg_asana_project_task_task_id": ["model.asana_source.stg_asana_project_task"], "test.asana_source.unique_stg_asana_section_section_id": ["model.asana_source.stg_asana_section"], "test.asana_source.not_null_stg_asana_section_section_id": ["model.asana_source.stg_asana_section"], "test.asana_source.unique_stg_asana_story_story_id": ["model.asana_source.stg_asana_story"], "test.asana_source.not_null_stg_asana_story_story_id": ["model.asana_source.stg_asana_story"], "test.asana_source.not_null_stg_asana_story_target_task_id": ["model.asana_source.stg_asana_story"], "test.asana_source.unique_stg_asana_tag_tag_id": ["model.asana_source.stg_asana_tag"], "test.asana_source.not_null_stg_asana_tag_tag_id": ["model.asana_source.stg_asana_tag"], "test.asana_source.unique_stg_asana_task_task_id": ["model.asana_source.stg_asana_task"], "test.asana_source.not_null_stg_asana_task_task_id": ["model.asana_source.stg_asana_task"], "test.asana_source.not_null_stg_asana_task_follower_task_id": ["model.asana_source.stg_asana_task_follower"], "test.asana_source.not_null_stg_asana_task_follower_user_id": ["model.asana_source.stg_asana_task_follower"], "test.asana_source.not_null_stg_asana_task_section_task_id": ["model.asana_source.stg_asana_task_section"], "test.asana_source.not_null_stg_asana_task_section_section_id": ["model.asana_source.stg_asana_task_section"], "test.asana_source.not_null_stg_asana_task_tag_tag_id": ["model.asana_source.stg_asana_task_tag"], "test.asana_source.not_null_stg_asana_task_tag_task_id": ["model.asana_source.stg_asana_task_tag"], "test.asana_source.unique_stg_asana_team_team_id": ["model.asana_source.stg_asana_team"], "test.asana_source.not_null_stg_asana_team_team_id": ["model.asana_source.stg_asana_team"], "test.asana_source.unique_stg_asana_user_user_id": ["model.asana_source.stg_asana_user"], "test.asana_source.not_null_stg_asana_user_user_id": ["model.asana_source.stg_asana_user"], "test.asana_source.source_unique_asana_user_id": ["source.asana_source.asana.user"], "test.asana_source.source_not_null_asana_user_id": ["source.asana_source.asana.user"], "test.asana_source.source_unique_asana_task_id": ["source.asana_source.asana.task"], "test.asana_source.source_not_null_asana_task_id": ["source.asana_source.asana.task"], "test.asana_source.source_not_null_asana_task_created_at": ["source.asana_source.asana.task"], "test.asana_source.source_unique_asana_project_id": ["source.asana_source.asana.project"], "test.asana_source.source_not_null_asana_project_id": ["source.asana_source.asana.project"], "test.asana_source.source_not_null_asana_project_created_at": ["source.asana_source.asana.project"], "test.asana_source.source_unique_asana_story_id": ["source.asana_source.asana.story"], "test.asana_source.source_not_null_asana_story_id": ["source.asana_source.asana.story"], "test.asana_source.source_not_null_asana_story_created_at": ["source.asana_source.asana.story"], "test.asana_source.source_not_null_asana_story_target_id": ["source.asana_source.asana.story"], "test.asana_source.source_unique_asana_team_id": ["source.asana_source.asana.team"], "test.asana_source.source_not_null_asana_team_id": ["source.asana_source.asana.team"], "test.asana_source.source_unique_asana_tag_id": ["source.asana_source.asana.tag"], "test.asana_source.source_not_null_asana_tag_id": ["source.asana_source.asana.tag"], "test.asana_source.source_unique_asana_section_id": ["source.asana_source.asana.section"], "test.asana_source.source_not_null_asana_section_id": ["source.asana_source.asana.section"], "test.asana_source.source_not_null_asana_section_project_id": ["source.asana_source.asana.section"], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id": ["source.asana_source.asana.project_task"], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id": ["source.asana_source.asana.task_follower"], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id": ["source.asana_source.asana.task_tag"], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id": ["source.asana_source.asana.task_section"], "source.asana_source.asana.user": [], "source.asana_source.asana.task": [], "source.asana_source.asana.project": [], "source.asana_source.asana.story": [], "source.asana_source.asana.team": [], "source.asana_source.asana.tag": [], "source.asana_source.asana.section": [], "source.asana_source.asana.project_task": [], "source.asana_source.asana.task_follower": [], "source.asana_source.asana.task_tag": [], "source.asana_source.asana.task_section": []}, "child_map": {"model.asana.asana_user": ["test.asana.not_null_asana_user_user_id", "test.asana.unique_asana_user_user_id"], "model.asana.asana_task": ["model.asana.asana_daily_metrics", "model.asana.asana_project_task_metrics", "model.asana.asana_tag", "model.asana.asana_user_task_metrics", "test.asana.not_null_asana_task_task_id", "test.asana.unique_asana_task_task_id"], "model.asana.asana_team": ["test.asana.not_null_asana_team_team_id", "test.asana.unique_asana_team_team_id"], "model.asana.asana_project": ["model.asana.asana_team", "test.asana.not_null_asana_project_project_id", "test.asana.unique_asana_project_project_id"], "model.asana.asana_daily_metrics": ["test.asana.not_null_asana_daily_metrics_date_day", "test.asana.unique_asana_daily_metrics_date_day"], "model.asana.asana_tag": ["test.asana.not_null_asana_tag_tag_id", "test.asana.unique_asana_tag_tag_id"], "model.asana.asana_subtask_parent": ["model.asana.asana_task", "test.asana.not_null_asana_subtask_parent_subtask_id", "test.asana.unique_asana_subtask_parent_subtask_id"], "model.asana.asana_task_assignee": ["model.asana.asana_project_user", "model.asana.asana_subtask_parent", "model.asana.asana_task", "test.asana.not_null_asana_task_assignee_task_id", "test.asana.unique_asana_task_assignee_task_id"], "model.asana.asana_task_first_modifier": ["model.asana.asana_task", "test.asana.not_null_asana_task_first_modifier_task_id", "test.asana.unique_asana_task_first_modifier_task_id"], "model.asana.asana_project_task_metrics": ["model.asana.asana_project", "test.asana.not_null_asana_project_task_metrics_project_id", "test.asana.unique_asana_project_task_metrics_project_id"], "model.asana.asana_user_task_metrics": ["model.asana.asana_user", "test.asana.not_null_asana_user_task_metrics_user_id", "test.asana.unique_asana_user_task_metrics_user_id"], "model.asana.asana_task_comments": ["model.asana.asana_task", "test.asana.not_null_asana_task_comments_task_id", "test.asana.unique_asana_task_comments_task_id"], "model.asana.asana_project_user": ["model.asana.asana_project", "model.asana.asana_user", "test.asana.unique_asana_project_user_project_id_user_id_role_currently_working_on"], "model.asana.asana_task_tags": ["model.asana.asana_task", "test.asana.not_null_asana_task_tags_task_id", "test.asana.unique_asana_task_tags_task_id"], "model.asana.asana_task_followers": ["model.asana.asana_task", "test.asana.not_null_asana_task_followers_task_id", "test.asana.unique_asana_task_followers_task_id"], "model.asana.asana_task_open_length": ["model.asana.asana_task", "test.asana.not_null_asana_task_open_length_task_id", "test.asana.unique_asana_task_open_length_task_id"], "model.asana.asana_task_story": ["model.asana.asana_task_comments", "model.asana.asana_task_first_modifier", "model.asana.asana_task_open_length", "test.asana.not_null_asana_task_story_story_id", "test.asana.unique_asana_task_story_story_id"], "model.asana.asana_task_projects": ["model.asana.asana_task", "test.asana.not_null_asana_task_projects_task_id", "test.asana.unique_asana_task_projects_task_id"], "test.asana.unique_asana_task_task_id": [], "test.asana.not_null_asana_task_task_id": [], "test.asana.unique_asana_user_user_id": [], "test.asana.not_null_asana_user_user_id": [], "test.asana.unique_asana_project_project_id": [], "test.asana.not_null_asana_project_project_id": [], "test.asana.unique_asana_team_team_id": [], "test.asana.not_null_asana_team_team_id": [], "test.asana.unique_asana_tag_tag_id": [], "test.asana.not_null_asana_tag_tag_id": [], "test.asana.unique_asana_daily_metrics_date_day": [], "test.asana.not_null_asana_daily_metrics_date_day": [], "test.asana.unique_asana_project_task_metrics_project_id": [], "test.asana.not_null_asana_project_task_metrics_project_id": [], "test.asana.unique_asana_project_user_project_id_user_id_role_currently_working_on": [], "test.asana.unique_asana_subtask_parent_subtask_id": [], "test.asana.not_null_asana_subtask_parent_subtask_id": [], "test.asana.unique_asana_task_assignee_task_id": [], "test.asana.not_null_asana_task_assignee_task_id": [], "test.asana.unique_asana_task_comments_task_id": [], "test.asana.not_null_asana_task_comments_task_id": [], "test.asana.unique_asana_task_first_modifier_task_id": [], "test.asana.not_null_asana_task_first_modifier_task_id": [], "test.asana.unique_asana_task_followers_task_id": [], "test.asana.not_null_asana_task_followers_task_id": [], "test.asana.unique_asana_task_open_length_task_id": [], "test.asana.not_null_asana_task_open_length_task_id": [], "test.asana.unique_asana_task_projects_task_id": [], "test.asana.not_null_asana_task_projects_task_id": [], "test.asana.unique_asana_task_story_story_id": [], "test.asana.not_null_asana_task_story_story_id": [], "test.asana.unique_asana_task_tags_task_id": [], "test.asana.not_null_asana_task_tags_task_id": [], "test.asana.unique_asana_user_task_metrics_user_id": [], "test.asana.not_null_asana_user_task_metrics_user_id": [], "model.asana_source.stg_asana_team": ["model.asana.asana_project", "model.asana.asana_team", "test.asana_source.not_null_stg_asana_team_team_id", "test.asana_source.unique_stg_asana_team_team_id"], "model.asana_source.stg_asana_project_task": ["model.asana.asana_project_task_metrics", "model.asana.asana_project_user", "model.asana.asana_task_projects", "test.asana_source.not_null_stg_asana_project_task_project_id", "test.asana_source.not_null_stg_asana_project_task_task_id"], "model.asana_source.stg_asana_project": ["model.asana.asana_project", "model.asana.asana_project_task_metrics", "model.asana.asana_project_user", "model.asana.asana_task_projects", "test.asana_source.not_null_stg_asana_project_project_id", "test.asana_source.unique_stg_asana_project_project_id"], "model.asana_source.stg_asana_task": ["model.asana.asana_task", "model.asana.asana_task_assignee", "model.asana.asana_task_open_length", "test.asana_source.not_null_stg_asana_task_task_id", "test.asana_source.unique_stg_asana_task_task_id"], "model.asana_source.stg_asana_user": ["model.asana.asana_project", "model.asana.asana_task_assignee", "model.asana.asana_task_followers", "model.asana.asana_task_story", "model.asana.asana_user", "test.asana_source.not_null_stg_asana_user_user_id", "test.asana_source.unique_stg_asana_user_user_id"], "model.asana_source.stg_asana_task_tag": ["model.asana.asana_tag", "model.asana.asana_task_tags", "test.asana_source.not_null_stg_asana_task_tag_tag_id", "test.asana_source.not_null_stg_asana_task_tag_task_id"], "model.asana_source.stg_asana_task_follower": ["model.asana.asana_task_followers", "test.asana_source.not_null_stg_asana_task_follower_task_id", "test.asana_source.not_null_stg_asana_task_follower_user_id"], "model.asana_source.stg_asana_task_section": ["model.asana.asana_task_projects", "test.asana_source.not_null_stg_asana_task_section_section_id", "test.asana_source.not_null_stg_asana_task_section_task_id"], "model.asana_source.stg_asana_tag": ["model.asana.asana_tag", "model.asana.asana_task_tags", "test.asana_source.not_null_stg_asana_tag_tag_id", "test.asana_source.unique_stg_asana_tag_tag_id"], "model.asana_source.stg_asana_section": ["model.asana.asana_project", "model.asana.asana_task_projects", "test.asana_source.not_null_stg_asana_section_section_id", "test.asana_source.unique_stg_asana_section_section_id"], "model.asana_source.stg_asana_story": ["model.asana.asana_task_story", "test.asana_source.not_null_stg_asana_story_story_id", "test.asana_source.not_null_stg_asana_story_target_task_id", "test.asana_source.unique_stg_asana_story_story_id"], "test.asana_source.unique_stg_asana_project_project_id": [], "test.asana_source.not_null_stg_asana_project_project_id": [], "test.asana_source.not_null_stg_asana_project_task_project_id": [], "test.asana_source.not_null_stg_asana_project_task_task_id": [], "test.asana_source.unique_stg_asana_section_section_id": [], "test.asana_source.not_null_stg_asana_section_section_id": [], "test.asana_source.unique_stg_asana_story_story_id": [], "test.asana_source.not_null_stg_asana_story_story_id": [], "test.asana_source.not_null_stg_asana_story_target_task_id": [], "test.asana_source.unique_stg_asana_tag_tag_id": [], "test.asana_source.not_null_stg_asana_tag_tag_id": [], "test.asana_source.unique_stg_asana_task_task_id": [], "test.asana_source.not_null_stg_asana_task_task_id": [], "test.asana_source.not_null_stg_asana_task_follower_task_id": [], "test.asana_source.not_null_stg_asana_task_follower_user_id": [], "test.asana_source.not_null_stg_asana_task_section_task_id": [], "test.asana_source.not_null_stg_asana_task_section_section_id": [], "test.asana_source.not_null_stg_asana_task_tag_tag_id": [], "test.asana_source.not_null_stg_asana_task_tag_task_id": [], "test.asana_source.unique_stg_asana_team_team_id": [], "test.asana_source.not_null_stg_asana_team_team_id": [], "test.asana_source.unique_stg_asana_user_user_id": [], "test.asana_source.not_null_stg_asana_user_user_id": [], "test.asana_source.source_unique_asana_user_id": [], "test.asana_source.source_not_null_asana_user_id": [], "test.asana_source.source_unique_asana_task_id": [], "test.asana_source.source_not_null_asana_task_id": [], "test.asana_source.source_not_null_asana_task_created_at": [], "test.asana_source.source_unique_asana_project_id": [], "test.asana_source.source_not_null_asana_project_id": [], "test.asana_source.source_not_null_asana_project_created_at": [], "test.asana_source.source_unique_asana_story_id": [], "test.asana_source.source_not_null_asana_story_id": [], "test.asana_source.source_not_null_asana_story_created_at": [], "test.asana_source.source_not_null_asana_story_target_id": [], "test.asana_source.source_unique_asana_team_id": [], "test.asana_source.source_not_null_asana_team_id": [], "test.asana_source.source_unique_asana_tag_id": [], "test.asana_source.source_not_null_asana_tag_id": [], "test.asana_source.source_unique_asana_section_id": [], "test.asana_source.source_not_null_asana_section_id": [], "test.asana_source.source_not_null_asana_section_project_id": [], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id": [], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id": [], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id": [], "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id": [], "source.asana_source.asana.user": ["model.asana_source.stg_asana_user", "test.asana_source.source_not_null_asana_user_id", "test.asana_source.source_unique_asana_user_id"], "source.asana_source.asana.task": ["model.asana_source.stg_asana_task", "test.asana_source.source_not_null_asana_task_created_at", "test.asana_source.source_not_null_asana_task_id", "test.asana_source.source_unique_asana_task_id"], "source.asana_source.asana.project": ["model.asana_source.stg_asana_project", "test.asana_source.source_not_null_asana_project_created_at", "test.asana_source.source_not_null_asana_project_id", "test.asana_source.source_unique_asana_project_id"], "source.asana_source.asana.story": ["model.asana_source.stg_asana_story", "test.asana_source.source_not_null_asana_story_created_at", "test.asana_source.source_not_null_asana_story_id", "test.asana_source.source_not_null_asana_story_target_id", "test.asana_source.source_unique_asana_story_id"], "source.asana_source.asana.team": ["model.asana_source.stg_asana_team", "test.asana_source.source_not_null_asana_team_id", "test.asana_source.source_unique_asana_team_id"], "source.asana_source.asana.tag": ["model.asana_source.stg_asana_tag", "test.asana_source.source_not_null_asana_tag_id", "test.asana_source.source_unique_asana_tag_id"], "source.asana_source.asana.section": ["model.asana_source.stg_asana_section", "test.asana_source.source_not_null_asana_section_id", "test.asana_source.source_not_null_asana_section_project_id", "test.asana_source.source_unique_asana_section_id"], "source.asana_source.asana.project_task": ["model.asana_source.stg_asana_project_task", "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_project_task_project_id__task_id"], "source.asana_source.asana.task_follower": ["model.asana_source.stg_asana_task_follower", "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_follower_task_id__user_id"], "source.asana_source.asana.task_tag": ["model.asana_source.stg_asana_task_tag", "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_tag_task_id__tag_id"], "source.asana_source.asana.task_section": ["model.asana_source.stg_asana_task_section", "test.asana_source.dbt_utils_source_unique_combination_of_columns_asana_task_section_section_id__task_id"]}, "metadata": {"project_id": "849f302fe2402e8320c730aa4f6704f3", "user_id": "3ba29a2e-e6c1-4d02-90b0-62926a040844", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}}